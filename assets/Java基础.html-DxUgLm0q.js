import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as n}from"./app-BDhRxcGH.js";const h="/assets/image-20200303095521906-Bt85K_93.png",e={};function l(k,i){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="java-基础" tabindex="-1"><a class="header-anchor" href="#java-基础"><span>Java 基础</span></a></h1><h1 id="一、数组" tabindex="-1"><a class="header-anchor" href="#一、数组"><span>一、数组</span></a></h1><p>1、首先再次巩固一下，知道可以用**Arrays.sort()**进行升序排序，并且java体系中没有降序函数。</p><p>2、Arrays.fill()</p><p>功能：可以批量填充数组内容</p><p>​ 1、Arrays.fill（array，int value）将数组所有的值全部填充为value<br> ​ 2、Arrays.fill（array，int start，int last，int value）将索引值start到last的值（不包括last索引的值）全部填充为value。</p><p>3、Arrays.copyOf(array，int length) <br> 功能：可以拷贝一个数组<br> 参数：array为将要拷贝的数组<br> length为将要拷贝的长度<br> 从第一元素开始算起，没有包含到的数组元素将不被拷贝。</p><p>4、Arrays.copyOfRange(array，int fromIndex，int toIndex)</p><p>​ 功能：可以拷贝从索引值fromIndex到toIndex的值（不包括toIndex）。</p><p>5、sort（）、copyOfRange（）和copyOf（）都是Arrays的静态方法。</p><h1 id="二、数字与字符串" tabindex="-1"><a class="header-anchor" href="#二、数字与字符串"><span>二、数字与字符串</span></a></h1><blockquote><p>String类</p></blockquote><h2 id="_1、构造方法" tabindex="-1"><a class="header-anchor" href="#_1、构造方法"><span>1、构造方法</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> original)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以将参数实例化为字符串类型</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> original</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> fromIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> count)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以将从索引值为fromIndex开始，获取长度为count的数据作为字符串。</p><h2 id="_2、数字转字符串" tabindex="-1"><a class="header-anchor" href="#_2、数字转字符串"><span>2、数字转字符串</span></a></h2><p><strong>（1）利用函数</strong></p><p>​ 如果直接<code>String str=123;</code>这样就会报错，因为123是整型，而str是字符串类型，所以不能直接进行转换，因此，java提供了一个静态方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> valueOf（args）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>​ 将任意的整型、长整型、布尔型等等转换为字符串类型。</p><p><strong>（2）隐式转换</strong></p><p>​ 还有一种方式为隐式转换，比如String a =&quot;&quot;+123;这样a就是一个字符串类型了。但是隐式转换有三种需要注意的地方，举三个例子</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;4&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时a、b、c有分别为什么取值呢？</p><p>a应该是1234，编译器看到“”会把后面所有的+当成字符串的拼接，</p><p>b应该是64，编译器先进性加法运算，然后看到“”就开始进行字符串的拼接，</p><p>c应该是19，因为有个括号，运算的优先级发生变化，先进行后面的运算，然后在开始字符串的拼接。</p><h2 id="_3、函数" tabindex="-1"><a class="header-anchor" href="#_3、函数"><span>3、函数</span></a></h2><p>（1）concat（String str）<br> 字符串的拼接。可以将str加入到一个字符串的最后位置，例如，String a =“123”； a=a.concat（“45”）-&gt;a = &quot;12345&quot; 就可以完成一个字符串拼接。</p><p>（2）length()</p><p>​ 获取字符串的长度。因为字符串是一个对象所以加上括号，而计算数组的长度直接length，因为length是数组的一个属性，所以不需要加上括号。</p><p>​ 运用length()获得的字符串长度包括字符串中所有的空格，不管空格是否在中间或者开头末尾。</p><p>（3）charAt（int a） <br> 通过索引值获取字符串的中的某个字符</p><p>（4）indexOf()</p><p>​ 获取子字符串的索引值</p><ul><li>indexOf（char a）找出a的第一的出现的索引位置</li><li>indexOf（char a ，int fromIndex）找出a从fromIndex开始出现第一次的索引位置</li><li>lastIndexOf（） 功能：获取子字符串最后出现的索引值 <ul><li>lastIndexOf（char a）找出a的最后一次的出现的索引位置</li><li>lastIndexOf（char a ，int fromIndex）找出a从fromIndex向前出现最后一次的索引位置<br> 如果查询不到就会返回-1.</li></ul></li></ul><p>（5）endsWith（String str） startsWith（String str）</p><p>​ 获取首尾字符串，并返回一个布尔值</p><p>（6）contains（String str）</p><p>​ 判断子字符串是否存在，返回一个布尔值</p><p>（7）toCharArray()</p><p>​ 将字符串转换为字符数组</p><p>（8）equals（String b）</p><p>​ 比较字符串内容是否相等，返回一个布尔值</p><p>（8）substring（int beginIndex）</p><p>​ 从beginIndex开始截取一段字符串</p><p>substring（int beginIndex，int endIndex）</p><p>截取从beginIndex到endindex的字符串</p><p>（9）replace</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> replace</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CharSequence</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CharSequence</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> replacement) </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> replaceAll</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> regex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> replacement)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> replaceFirst</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> regex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> replacement)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>都需要两个参数，都是将指定字符串替换为想要的字符串。</p><p>第二个可以支持正则表达式而第一个不支持</p><p>第三个支持正则表达式但是他只会替换第一个找到的</p><p>而第二个将替换所有指定的字符串。</p><p>拓展：CharSequence是一个接口，而String实现了这个接口，也可以说String也是CharSequence类型，CharSequence就是字符序列，String, StringBuilder和StringBuffer本质上都是通过字符数组实现的。</p><p>（10）</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> toUpperCase</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> toLowerCase</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>无参方法。将字符串对象转化为大写或者小写形式。</p><p>（11）public String trim()</p><p>无参方法。可以去除首尾的空格，但是无法去除字符串中间的空格</p><p>拓展：利用replaceAll（）可以去除字符串中所有的空格。</p><p>（12）</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> format</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> args</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第一个参数表示的格式化的格式</p><p>第二个的参数是需要被格式化的对象</p><p>功能：两个参数。静态方法。能对指定数据按指定的格式进行格式化。</p><p>常规格式化，如同c语言中的printf()和scanf()函数，例：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,c);     </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%.2f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.23434</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>而在java中format与之非常相似，例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;天才是%d%%的灵感加上%d%%的汗水&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">，</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">99</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>得到：天才是1%的灵感加上99%的汗水，注意在这里“%”的输出要有两个%%，不然会报错。</p><h2 id="_4、时间格式化" tabindex="-1"><a class="header-anchor" href="#_4、时间格式化"><span>4、时间格式化</span></a></h2><p>以下转换字符用于格式化常见的日期/时间组合。</p><p>​ &#39;R&#39; 24 小时制的时间，被格式化为 &quot;%tH:%tM&quot;</p><p>​ &#39;T&#39; 24 小时制的时间，被格式化为 &quot;%tH:%tM:%tS&quot;。</p><p>​ &#39;r&#39; 12 小时制的时间，被格式化为 &quot;%tI:%tM:%tS %Tp&quot;。上午或下午标记 (&#39;%Tp&#39;) 的位置可能与语言环境有关。</p><p>​ &#39;D&#39; 日期，被格式化为 &quot;%tm/%td/%ty&quot;。</p><p>​ &#39;F&#39; ISO 8601 格式的完整日期，被格式化为 &quot;%tY-%tm-%td&quot;。</p><p>​ &#39;c&#39; 日期和时间，被格式化为 &quot;%ta %tb %td %tT %tZ %tY&quot;，例如 &quot;Sun Jul 20 16:17:00 EDT 1969&quot;。<br> 常用 单独格式化</p><p>​ &#39;Y&#39; 年份，被格式化为必要时带前导零的四位数（至少），例如，0092 等于格里高利历的 92 CE。</p><p>​ &#39;y&#39; 年份的最后两位数，被格式化为必要时带前导零的两位数，即 00 - 99。</p><p>​ &#39;B&#39; 特定于语言环境的月份全称，例如 &quot;January&quot; 和 &quot;February&quot;。</p><p>​ &#39;b&#39; 特定于语言环境的月份简称，例如 &quot;Jan&quot; 和 &quot;Feb&quot;。</p><p>​ &#39;d&#39; 一个月中的天数，被格式化为必要时带前导零两位数，即 01 - 31</p><p>​ &#39;H&#39; 24 小时制的小时，被格式化为必要时带前导零的两位数，即 00 - 23。</p><p>​ &#39;M&#39; 小时中的分钟，被格式化为必要时带前导零的两位数，即 00 - 59。</p><p>​ &#39;S&#39; 分钟中的秒，被格式化为必要时带前导零的两位数，即 00 - 60 （&quot;60&quot; 是支持闰秒所需的一个特殊值）。</p><p>​ 一般小写字母表示的是简写，大写表示的全称</p><h2 id="_5、stringbuffer和stringbuilder" tabindex="-1"><a class="header-anchor" href="#_5、stringbuffer和stringbuilder"><span>5、StringBuffer和StringBuilder</span></a></h2><p>​ Buffer 为缓冲的意思。它是线程安全的可变字符序列，类似于String的字符串缓冲区，其容量会随存放的字符串增加而自动增加。这个类存在两种构造方法：StringBuffer()、StringBuffer(int capacity)，第一种即初始字符容量为默认值16的字符。</p><p>​ StringBuffer与String的不同：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;32&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) 	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//表示实例化一个值为32的字符序列</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">new StringBuffer(32)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//表示初始字符容量为32的字符</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）public void setCharAt（index，ch）功能：通过索引值修改为指定的字符</p><p>（2）public StringBuffer reverse（）功能：将字符串反序</p><p>（3）public StringBuffer delete（int start ,int end）功能：删除从索引值start到end之间的字符。</p><p>（4）同样StringBuffer有许多与String相同的方法length（）、charAt（）、indexOf（）、substring（）、replace（）。</p><p>但这里的replace（）方法与String的不同，因为他有三个参数replace（int start，int end ，String str），能将从索引值start开始到end之间的值换为str。</p><p>StringBuilder 它的所有方法都与StringBuffer相同，但不支持线程同步，所以效率为最高的。</p><p><strong>总结：String、StringBuffer和StringBuilder的关系</strong></p><p>1、String可以通过**new StringBuffer(str)<strong>或者</strong>new StringBuilder(str)**转换为其他两种类型</p><p>2、而其他两种可以通过**toString()**转化为String类型。</p><p>3、String适合<strong>数据少</strong>，<strong>操作少</strong>情况下。<strong>效率低</strong>、<strong>线程不安全</strong>、为字符<strong>常量</strong>。</p><p>4、StringBuilder适合<strong>单线程</strong>，<strong>操作多</strong>，数据多的情况下。<strong>效率高</strong>、<strong>线程不安全</strong>、为字符<strong>变量</strong>。</p><p>5、StringBuffer适合<strong>多线程</strong>，<strong>操作多</strong>，数据多的情况下。<strong>效率中</strong>、<strong>线程安全</strong>、为字符<strong>变量</strong>。</p><h1 id="三、面向对象" tabindex="-1"><a class="header-anchor" href="#三、面向对象"><span>三、面向对象</span></a></h1><p>​ 面向对象：世间万物皆为对象，就比如我们人，有自己的属性，姓名、年龄等等，还有行为方法，如行走，吃饭等等，这样将数据与对数据的处理方法放在一起，作为一个相互依赖的整体，这个整体可以称之为对象，而将同类对象抽象出同一特性，这些特性组合，然后就形成了类。</p><p>（1）对象和类？<br> 对象：一切皆对象。<br> 类：归类、物以类聚、人以群分。类别<br> 我对象：女的（外观）、活的（行为）<br> 具有【共同特征】和【共同行为】的一类实物的集合<br> 设置类：抽象过程 类的属性 类的方法</p><p>（2）对象和类的区别？为什么要有类<br> 类 对象<br> 集合 个体<br> 抽象 具体<br> 模板 实例<br> 数据结构 数据</p><p>为什么要有类，方便得到实例，方便操作实例<br> 类：实质是数据机构的定义和对象方法的归类。方法就是实现某项功能的定义</p><p>（3）类的作用？如何由类得到对象？</p><p>（4）对象实例化时，内存中格式如何操作的？【重点】【难点】</p><p>从类中实例化对象时，初始值为对应类型的零值</p><p>（5）toString方法作用？</p><p>​ 如果类没有toString方法，会默认调用其父类的toString，没有父类，调用根类object</p><p>（6）对象的比较！equals方法和==区别？（面试）</p><p>system.gc（）强制销毁对象</p><p>用this调用构造方法时，代码应该写在方法最前面，不然会报错。</p><h1 id="四、日期" tabindex="-1"><a class="header-anchor" href="#四、日期"><span>四、日期</span></a></h1><p>1、语法：Date date=new Date()<br> Date date=new Date(long time) 参数是1970年1月1日00：00：00以来的指定毫秒数</p><p>2、Calendar c = Calendar.getInstance()</p><h1 id="五、集合" tabindex="-1"><a class="header-anchor" href="#五、集合"><span>五、集合</span></a></h1><p>1、Collection接口<br> add() 将指定的对象添加到该集合中<br> remove() 将指定的对象从该集合中移除<br> isEmpty() 返回boolean值，用于判断集合是否为空<br> size() 返回int型值，获取该集合中元素的个数<br> iterator() 返回在此collection的元素上进行迭代的的迭代器。用于遍历集合中的对象</p><h1 id="六、网络编程" tabindex="-1"><a class="header-anchor" href="#六、网络编程"><span>六、网络编程</span></a></h1><p><strong>1、获取本地地址</strong></p><p>InetAddress host=InetAddress.getLocalHost（）；IP地址</p><p><strong>2、获取指定地址</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InetAddress</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> host</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">InetAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getByName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;192.168.0.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	//域名地址</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InetAddress</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> host</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">InetAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getByName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;www.baidu.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	//计算机名</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InetAddress</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> host</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">InetAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getByName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;WIN-NQEBEJ88FO&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//获取指定主机的所有地址</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InetAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[]hosts</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">InetAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getByName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;www.baidu.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Socket</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> client </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Socket</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;服务器ip地址&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[服务器开启的端口])</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3、InetAddress 封装计算机的IP地址和主机名，没有端口</strong></p><p>（1）静态方法获取对象：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">InetAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getLocalHost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">InetAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getByName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;www.baidu.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">InetAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getByName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;223.3.4.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getHostAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() 	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//返回ip地址</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getHostName</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()  		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//返回域名，本机为计算机名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4、InetSocketAddress 封装了端口</strong></p><p>（1）创建对象</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">InetSocketAddress（string hostname， </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> port）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">InetSocketAddress（</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InetAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> addr， </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> port）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getHostName</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPort</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5、URL</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;协议：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProtocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;主机：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getHost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;端口：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;资源路径：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;资源路径2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="七、io" tabindex="-1"><a class="header-anchor" href="#七、io"><span>七、IO</span></a></h1><figure><img src="`+h+`" alt="image-20200303095521906" tabindex="0" loading="lazy"><figcaption>image-20200303095521906</figcaption></figure><h1 id="八、jdbc" tabindex="-1"><a class="header-anchor" href="#八、jdbc"><span>八、JDBC</span></a></h1><p>1、加载驱动类<br> 2、获取数据库连接对象（连接指定的数据库）<br> 3、获取sql命令对象（编译和发送sql命令给数据库）<br> 4、创建sql命令<br> 5、执行sql命令<br> 6、关闭资源</p><h1 id="九、反射" tabindex="-1"><a class="header-anchor" href="#九、反射"><span>九、反射</span></a></h1><h2 id="_1、概念和特点" tabindex="-1"><a class="header-anchor" href="#_1、概念和特点"><span>1、概念和特点</span></a></h2><p>1、引入<br> 按照事务的特征来进行抽取成具体的java类，由java类来进行具体对象的创建</p><p>java中的类的特征：---抽取一个类来表示类的共同特征.<br> 属性：<br> 修饰符 类型 属性名 值<br> 结论：可以创建一个专门的类表示以上特性，该类的一个实例化对象表示一个具体的属性<br> 方法：<br> 修饰符 返回值类型 方法名 形参 方法体<br> 结论：可以创建一个专门的类表示以上特性，该类的一个实例化对象表示一个具体的方法<br> 构造器：<br> 修饰符 形参 方法体<br> 结论：可以创建一个专门的类表示以上特性，该类的一个实例化对象表示一个具体的构造器</p><p>总结论：创建一个类，该类的实例化对象存储了一个类的所有信息。这就是反射。</p><p>2、概念<br> 万事万物皆对象，所以类也是对象。参考引入</p><p>3、作用：<br> 实现了java对象的动态创建</p><p>4、问题引入<br> 传统方式创建对象：&quot; new 类名 ( ) ; &quot;，前提是必须预先知道要使用的类。但是，如果无法确定要执行的对象怎么办？<br> 如果要修改使用的类，必须修改源码.<br> 5、解决<br> 使用反射.</p><p>6、使用：<br> 获取类对象<br> 操作属性操作方法<br> 操作构造器</p><p>7、特点<br> 动态的创建java对象</p><p>8、缺点<br> 效率低，影响程序的性能</p><h2 id="_2、使用" tabindex="-1"><a class="header-anchor" href="#_2、使用"><span>2、使用</span></a></h2><p>1、三种方式创建</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		//根据全路径获取(常用，必须会)------&gt;创建类对象较多</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">对象名</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	//根据对象获取-----&gt;操作反射方法较多</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">类名</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		//根据类名获取-----&gt;操作反射方法较多</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、类对象的方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cla</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		//获取实例化对象</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cla</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPackage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		//获取类对象的包名</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cla</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getModifiers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		//获取类的修饰符</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cla</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			//获取类的名称（全限定）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cla</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getsimpleName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		//获取类的名称（类名）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cla</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getsuperclass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		//获取类的名称（类名）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、操作类属性</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cla</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getFields</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">		返回指定字段</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cla</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getFields</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">		返回类及其所有父类的公有字段field数组</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cla</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDeclareFields</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	返回类及其所有字段field数组</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cla</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDeclareField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	返回指定字段</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">		获取属性名</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getModifiers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">		获取修饰符</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">		获取类型，返回的是类型的类对象</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAccessible</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ture)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	暴力反射，操作私有属性，不安全</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、操作类方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMethods</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()						获取所有的公共方法包括父类</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDeclaredMethods</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()				获取所有声明的方法包括父类</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cla</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)	获取指定的公共方法</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">		String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> name		表示方法名</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">		Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> cla</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	表示方法接受的参数类型的类对象</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDeclaredMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> name，</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cla</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)获取指定的声明方法</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">		String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> name		表示方法名</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">		Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> cla</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	表示方法接受的参数类型的类对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,165)]))}const d=s(e,[["render",l],["__file","Java基础.html.vue"]]),g=JSON.parse('{"path":"/knowledge/Java/JavaSE/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/Java%E5%9F%BA%E7%A1%80.html","title":"Java 基础","lang":"zh-CN","frontmatter":{"description":"Java 基础 一、数组 1、首先再次巩固一下，知道可以用**Arrays.sort()**进行升序排序，并且java体系中没有降序函数。 2、Arrays.fill() 功能：可以批量填充数组内容 ​ 1、Arrays.fill（array，int value）将数组所有的值全部填充为value ​ 2、Arrays.fill（array，int s...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/knowledge/Java/JavaSE/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/Java%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:title","content":"Java 基础"}],["meta",{"property":"og:description","content":"Java 基础 一、数组 1、首先再次巩固一下，知道可以用**Arrays.sort()**进行升序排序，并且java体系中没有降序函数。 2、Arrays.fill() 功能：可以批量填充数组内容 ​ 1、Arrays.fill（array，int value）将数组所有的值全部填充为value ​ 2、Arrays.fill（array，int s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-17T14:21:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-17T14:21:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-17T14:21:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[{"level":2,"title":"1、构造方法","slug":"_1、构造方法","link":"#_1、构造方法","children":[]},{"level":2,"title":"2、数字转字符串","slug":"_2、数字转字符串","link":"#_2、数字转字符串","children":[]},{"level":2,"title":"3、函数","slug":"_3、函数","link":"#_3、函数","children":[]},{"level":2,"title":"4、时间格式化","slug":"_4、时间格式化","link":"#_4、时间格式化","children":[]},{"level":2,"title":"5、StringBuffer和StringBuilder","slug":"_5、stringbuffer和stringbuilder","link":"#_5、stringbuffer和stringbuilder","children":[]},{"level":2,"title":"1、概念和特点","slug":"_1、概念和特点","link":"#_1、概念和特点","children":[]},{"level":2,"title":"2、使用","slug":"_2、使用","link":"#_2、使用","children":[]}],"git":{"createdTime":1739802080000,"updatedTime":1739802080000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":1,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":12.25,"words":3674},"filePathRelative":"knowledge/Java/JavaSE/Java基础语法/Java基础.md","localizedDate":"2025年2月17日","excerpt":"\\n<h1>一、数组</h1>\\n<p>1、首先再次巩固一下，知道可以用**Arrays.sort()**进行升序排序，并且java体系中没有降序函数。</p>\\n<p>2、Arrays.fill()</p>\\n<p>功能：可以批量填充数组内容</p>\\n<p>​\\t1、Arrays.fill（array，int value）将数组所有的值全部填充为value<br>\\n​\\t2、Arrays.fill（array，int start，int last，int value）将索引值start到last的值（不包括last索引的值）全部填充为value。</p>\\n<p>3、Arrays.copyOf(array，int length)\\t<br>\\n功能：可以拷贝一个数组<br>\\n参数：array为将要拷贝的数组<br>\\nlength为将要拷贝的长度<br>\\n从第一元素开始算起，没有包含到的数组元素将不被拷贝。</p>","autoDesc":true}');export{d as comp,g as data};
