import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as r}from"./app-y10xhlsH.js";const i={};function o(l,e){return r(),a("div",null,e[0]||(e[0]=[n('<h1 id="抽象工厂模式" tabindex="-1"><a class="header-anchor" href="#抽象工厂模式"><span>抽象工厂模式</span></a></h1><h2 id="动机" tabindex="-1"><a class="header-anchor" href="#动机"><span>动机</span></a></h2><p>在软件系统中，经常面临着“一系列<mark>相互依赖的对象</mark>”的创建工作；同时，由于需求的变化，往往存在更多系列对象的创建工作。</p><p>如何应对这种变化？如何绕过常规的对象创建方法（new），提供一种“封装机制”来避免客户程序和这种“多系列具体对象创建工作”的紧耦合？</p><h2 id="模式定义" tabindex="-1"><a class="header-anchor" href="#模式定义"><span>模式定义</span></a></h2><p>提供一个接口，让该接口负责创建一系列“相关或者相互依赖的对象”，无需指定它们具体的类。</p><h2 id="要点总结" tabindex="-1"><a class="header-anchor" href="#要点总结"><span>要点总结</span></a></h2><ol><li>如果没有应对“<mark>多系列对象构建</mark>”的需求变化，则没有必要使用Abstract Factory模式，这时候使用简单的工厂完全可以。</li><li>“系列对象”指的是在某一特定系列下的对象之间有相互依赖、或作用的关系。不同系列的对象之间不能相互依赖。</li><li>Abstract Factory模式主要在于应对“新系列”的需求变动。其缺点在于难以应对“新对象”的需求变动。</li></ol>',8)]))}const s=t(i,[["render",o],["__file","02-抽象工厂模式.html.vue"]]),h=JSON.parse('{"path":"/knowledge/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html","title":"抽象工厂模式","lang":"zh-CN","frontmatter":{"description":"抽象工厂模式 动机 在软件系统中，经常面临着“一系列相互依赖的对象”的创建工作；同时，由于需求的变化，往往存在更多系列对象的创建工作。 如何应对这种变化？如何绕过常规的对象创建方法（new），提供一种“封装机制”来避免客户程序和这种“多系列具体对象创建工作”的紧耦合？ 模式定义 提供一个接口，让该接口负责创建一系列“相关或者相互依赖的对象”，无需指定它...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/knowledge/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:title","content":"抽象工厂模式"}],["meta",{"property":"og:description","content":"抽象工厂模式 动机 在软件系统中，经常面临着“一系列相互依赖的对象”的创建工作；同时，由于需求的变化，往往存在更多系列对象的创建工作。 如何应对这种变化？如何绕过常规的对象创建方法（new），提供一种“封装机制”来避免客户程序和这种“多系列具体对象创建工作”的紧耦合？ 模式定义 提供一个接口，让该接口负责创建一系列“相关或者相互依赖的对象”，无需指定它..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-17T14:21:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-17T14:21:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"抽象工厂模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-17T14:21:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[{"level":2,"title":"动机","slug":"动机","link":"#动机","children":[]},{"level":2,"title":"模式定义","slug":"模式定义","link":"#模式定义","children":[]},{"level":2,"title":"要点总结","slug":"要点总结","link":"#要点总结","children":[]}],"git":{"createdTime":1739802080000,"updatedTime":1739802080000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":1,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":0.95,"words":286},"filePathRelative":"knowledge/设计模式/02-抽象工厂模式.md","localizedDate":"2025年2月17日","excerpt":"\\n<h2>动机</h2>\\n<p>在软件系统中，经常面临着“一系列<mark>相互依赖的对象</mark>”的创建工作；同时，由于需求的变化，往往存在更多系列对象的创建工作。</p>\\n<p>如何应对这种变化？如何绕过常规的对象创建方法（new），提供一种“封装机制”来避免客户程序和这种“多系列具体对象创建工作”的紧耦合？</p>\\n<h2>模式定义</h2>\\n<p>提供一个接口，让该接口负责创建一系列“相关或者相互依赖的对象”，无需指定它们具体的类。</p>\\n<h2>要点总结</h2>\\n<ol>\\n<li>如果没有应对“<mark>多系列对象构建</mark>”的需求变化，则没有必要使用Abstract Factory模式，这时候使用简单的工厂完全可以。</li>\\n<li>“系列对象”指的是在某一特定系列下的对象之间有相互依赖、或作用的关系。不同系列的对象之间不能相互依赖。</li>\\n<li>Abstract Factory模式主要在于应对“新系列”的需求变动。其缺点在于难以应对“新对象”的需求变动。</li>\\n</ol>","autoDesc":true}');export{s as comp,h as data};
