import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-BQR2Y89h.js";const e="/assets/image-20250312224258580-Bhj-EiyO.png",t={};function h(p,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="深入-pod" tabindex="-1"><a class="header-anchor" href="#深入-pod"><span>深入 Pod</span></a></h1><h2 id="pod-配置文件" tabindex="-1"><a class="header-anchor" href="#pod-配置文件"><span>Pod 配置文件</span></a></h2><p>Pod 是 Kubernetes 中最小的可调度单位，可以包含一个或多个容器。Pod 的配置文件通常采用 YAML 格式，定义了 Pod 的元数据、容器规范、环境变量、卷等信息。</p><p>示例 Pod 配置文件：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">v1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Pod</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">my-pod</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  containers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">my-container</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nginx</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">containerPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>metadata</code></strong>：定义 Pod 的名称、标签、注解等。</li><li><strong><code>spec</code></strong>：定义 Pod 中容器的具体规格，包含容器镜像、端口、环境变量、卷等。</li></ul><h2 id="探针" tabindex="-1"><a class="header-anchor" href="#探针"><span>探针</span></a></h2><p>探针用于监控容器的健康状态，确保容器正常运行。如果某个探针失败，Kubernetes 会采取相应的动作（如重启容器、将其标记为不可用）。</p><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型</span></a></h3><ul><li><strong>StartupProbe</strong>：启动探针，用于容器启动时的健康检查。只有容器启动完成后才会启用 LivenessProbe 和 ReadinessProbe。适用于容器启动时间较长的场景。</li><li><strong>LivenessProbe</strong>：活跃探针，检测容器是否存活。如果探测失败，Kubernetes 会重启该容器。</li><li><strong>ReadinessProbe</strong>：就绪探针，检测容器是否准备好提供服务。如果探测失败，Kubernetes 会将容器从 Service 的可用列表中移除。</li></ul><h3 id="探测方式" tabindex="-1"><a class="header-anchor" href="#探测方式"><span>探测方式</span></a></h3><ul><li><p>ExecAction：通过执行命令来检查容器的健康状态。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">livenessProbe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cat</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/tmp/healthy</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>TCPSocketAction：通过 TCP 连接检查容器是否健康。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">livenessProbe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  tcpSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8080</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>HTTPGetAction：通过 HTTP 请求检查容器是否健康。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">livenessProbe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  httpGet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/healthz</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8080</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="参数配置" tabindex="-1"><a class="header-anchor" href="#参数配置"><span>参数配置</span></a></h3><ul><li><strong>initialDelaySeconds</strong>：初始延迟时间，探针在容器启动后等待的时间。</li><li><strong>periodSeconds</strong>：探针的执行周期。</li><li><strong>timeoutSeconds</strong>：探针的超时时间。</li><li><strong>successThreshold</strong>：成功响应的连续次数，探针才能认为容器健康。</li><li><strong>failureThreshold</strong>：失败的连续次数，超过该次数后，Kubernetes 会采取相应的行动（如重启容器）。</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">livenessProbe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  httpGet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/healthz</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8080</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  initialDelaySeconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  periodSeconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  timeoutSeconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  successThreshold</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  failureThreshold</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h2><figure><img src="`+e+`" alt="Pod的生命周期" tabindex="0" loading="lazy"><figcaption>Pod的生命周期</figcaption></figure><p>Pod 的生命周期可以分为多个阶段，Kubernetes 会根据 Pod 的生命周期状态来执行相应操作。</p><h3 id="pod-退出流程" tabindex="-1"><a class="header-anchor" href="#pod-退出流程"><span>Pod 退出流程</span></a></h3><p>当 Pod 需要退出时或者因策略（如 HPA 伸缩、节点驱逐等）被删除时，Kubernetes 开始终止该 Pod，流程如下：</p><ol><li><strong>删除操作</strong>： <ul><li><p>删除 Pod 时，Kubernetes 会从 Endpoint 中删除 Pod 的 IP 地址。</p><ul><li>Kubernetes <strong>Service</strong> 通过 Endpoint 维护与 Pod 的映射关系。</li><li>在 Pod 进入 <strong>Terminating</strong> 之前，Kubernetes 先从 Endpoint 中删除该 Pod 的 IP 地址，确保新请求不再被调度到该 Pod 上。</li><li>这一步骤保证了流量不会继续发送到即将被删除的 Pod，防止请求丢失或异常。</li></ul></li><li><p>Pod 的状态会变成 <code>Terminating</code>，表示 Pod 正在终止。</p><ul><li><p><code>kubectl get pod</code> 会显示 Pod 进入 <strong>Terminating</strong> 状态。</p></li><li><p>在此阶段，Pod 仍然在运行，直到所有终止步骤完成。</p></li><li><p>Pod 不会立即被杀死，而是等待完成优雅终止（Graceful Termination）。</p></li><li><p>变为删除中的状态后，会给 pod 一个宽限期，让 pod 去执行一些清理或销毁操作。配置参数：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 作用于 pod 中的所有容器</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  terminationGracePeriodSeconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><strong>执行 <code>preStop</code> 指令</strong>： <ul><li>在 Pod 被删除之前，Kubernetes 会执行容器中的 <code>preStop</code> 指令。这个步骤主要用于进行清理工作，确保 Pod 删除前完成一些必要的操作。</li><li><code>preStop</code> 可以执行 HTTP 请求或命令： <ul><li><strong>HTTP 请求</strong>：调用一个 API，通知应用执行清理任务。</li><li><strong>命令执行</strong>：运行 Shell 脚本或特定命令，完成资源释放等操作。</li></ul></li></ul></li></ol><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lifecycle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  preStop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-c</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sleep 5&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>preStop</code> 可以用来进行数据清理、资源释放等操作。</p></blockquote><h3 id="prestop-的应用" tabindex="-1"><a class="header-anchor" href="#prestop-的应用"><span>PreStop 的应用</span></a></h3><p><code>PreStop</code> 生命周期钩子用于在 Pod 被删除之前执行一些操作，常见的应用场景包括：</p><ul><li><p><strong>注册中心下线</strong>：在应用服务退出时，可以通过 <code>PreStop</code> 钩子向注册中心（如 Consul、Eureka）发送下线请求，通知其他服务该实例不再可用，避免流量继续发送到已关闭的 Pod。</p><ul><li><p><strong>应用场景</strong>：</p><ul><li><strong>微服务架构</strong>（如 Spring Cloud、Dubbo）：Pod 运行的服务通常注册到注册中心（如 Eureka、Consul、Nacos、Zookeeper），需要先下线，避免流量转发到即将终止的实例。</li><li><strong>负载均衡（Ingress、Service）</strong>：可主动调用 API，将自身从负载均衡列表移除。</li></ul></li><li><p><strong>实现方式</strong>：</p><ul><li><strong>HTTP 方式</strong>：调用注册中心提供的 API 下线实例。</li><li><strong>命令执行</strong>：执行 CLI 命令或脚本取消注册。</li></ul></li></ul><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lifecycle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  preStop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-c</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;curl -X POST http://register-center/downline&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>数据清理</strong>：执行清理操作，例如删除缓存文件、临时数据等，确保 Pod 被删除时不会留下垃圾数据。</p><ul><li><p><strong>应用场景</strong>：</p><ul><li><strong>数据库连接关闭</strong>：防止数据库连接泄漏，确保连接池释放资源。</li><li><strong>缓存清理</strong>：从 Redis、Etcd、Consul 等缓存系统删除相关 Key，避免脏数据。</li><li><strong>队列任务处理</strong>：确保 Kafka、RabbitMQ、RocketMQ 等消息队列的消费任务正常结束，避免消息丢失或重复消费。</li></ul></li><li><p><strong>实现方式</strong>：</p><ul><li><strong>执行脚本清理数据</strong></li><li><strong>调用 API 通知服务进行清理</strong></li></ul></li></ul><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lifecycle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  preStop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-c</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;rm -rf /tmp/*&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>数据销毁</strong>：执行一些必要的销毁操作，防止敏感数据泄露，如删除数据库或文件系统中的敏感信息。</p><ul><li><p><strong>应用场景</strong>：</p><ul><li><strong>日志归档</strong>：Pod 终止前，将重要日志转存到对象存储（如 S3、OSS、HDFS）。</li><li><strong>临时文件删除</strong>：Pod 可能会在 <code>/tmp</code> 或其他挂载目录存放临时文件，需要在退出前清理。</li><li><strong>数据库持久化</strong>：部分应用需要在关闭前执行数据持久化（如 Elasticsearch Flush 操作）。</li></ul></li><li><p><strong>实现方式</strong>：</p><ul><li><strong>归档日志</strong>：使用 <code>tar</code> 压缩日志，并上传到远程存储。</li><li><strong>删除本地临时文件</strong>：执行 <code>rm -rf /tmp/*</code> 释放空间。</li></ul></li></ul><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lifecycle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  preStop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-c</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;shred -u /path/to/sensitive/data&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>通过 <code>PreStop</code> 生命周期钩子，Kubernetes 提供了在 Pod 退出时进行清理和资源释放的能力，有助于保证集群中的健康和安全性。</p>`,27)]))}const k=i(t,[["render",h],["__file","04-深入Pod.html.vue"]]),o=JSON.parse('{"path":"/knowledge/%E5%AE%B9%E5%99%A8%E5%8C%96_%E7%BC%96%E6%8E%92/k8s/04-%E6%B7%B1%E5%85%A5Pod.html","title":"4. 深入 Pods","lang":"zh-CN","frontmatter":{"title":"4. 深入 Pods","category":"容器化&编排","tag":["k8s"],"description":"深入 Pod Pod 配置文件 Pod 是 Kubernetes 中最小的可调度单位，可以包含一个或多个容器。Pod 的配置文件通常采用 YAML 格式，定义了 Pod 的元数据、容器规范、环境变量、卷等信息。 示例 Pod 配置文件： metadata：定义 Pod 的名称、标签、注解等。 spec：定义 Pod 中容器的具体规格，包含容器镜像、端口...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/knowledge/%E5%AE%B9%E5%99%A8%E5%8C%96_%E7%BC%96%E6%8E%92/k8s/04-%E6%B7%B1%E5%85%A5Pod.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:title","content":"4. 深入 Pods"}],["meta",{"property":"og:description","content":"深入 Pod Pod 配置文件 Pod 是 Kubernetes 中最小的可调度单位，可以包含一个或多个容器。Pod 的配置文件通常采用 YAML 格式，定义了 Pod 的元数据、容器规范、环境变量、卷等信息。 示例 Pod 配置文件： metadata：定义 Pod 的名称、标签、注解等。 spec：定义 Pod 中容器的具体规格，包含容器镜像、端口..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-12T14:50:48.000Z"}],["meta",{"property":"article:tag","content":"k8s"}],["meta",{"property":"article:modified_time","content":"2025-03-12T14:50:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4. 深入 Pods\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-12T14:50:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[{"level":2,"title":"Pod 配置文件","slug":"pod-配置文件","link":"#pod-配置文件","children":[]},{"level":2,"title":"探针","slug":"探针","link":"#探针","children":[{"level":3,"title":"类型","slug":"类型","link":"#类型","children":[]},{"level":3,"title":"探测方式","slug":"探测方式","link":"#探测方式","children":[]},{"level":3,"title":"参数配置","slug":"参数配置","link":"#参数配置","children":[]}]},{"level":2,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[{"level":3,"title":"Pod 退出流程","slug":"pod-退出流程","link":"#pod-退出流程","children":[]},{"level":3,"title":"PreStop 的应用","slug":"prestop-的应用","link":"#prestop-的应用","children":[]}]}],"git":{"createdTime":1741791048000,"updatedTime":1741791048000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":1,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":5.07,"words":1521},"filePathRelative":"knowledge/容器化&编排/k8s/04-深入Pod.md","localizedDate":"2025年3月12日","excerpt":"\\n<h2>Pod 配置文件</h2>\\n<p>Pod 是 Kubernetes 中最小的可调度单位，可以包含一个或多个容器。Pod 的配置文件通常采用 YAML 格式，定义了 Pod 的元数据、容器规范、环境变量、卷等信息。</p>\\n<p>示例 Pod 配置文件：</p>\\n<div class=\\"language-yaml line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"yaml\\" data-title=\\"yaml\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">apiVersion</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">v1</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">kind</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">Pod</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">metadata</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">  name</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">my-pod</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">spec</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">  containers</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  - </span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">name</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">my-container</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">    image</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">nginx</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">    ports</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    - </span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">containerPort</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">80</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,o as data};
