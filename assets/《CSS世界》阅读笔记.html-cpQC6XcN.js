import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as l,o as a}from"./app-C7f1BNZb.js";const o={};function n(h,e){return a(),i("div",null,e[0]||(e[0]=[l('<p>[toc]</p><h1 id="《css世界》阅读笔记" tabindex="-1"><a class="header-anchor" href="#《css世界》阅读笔记"><span>《CSS世界》阅读笔记</span></a></h1><h1 id="第一章-概述" tabindex="-1"><a class="header-anchor" href="#第一章-概述"><span>第一章 概述</span></a></h1><h2 id="流" tabindex="-1"><a class="header-anchor" href="#流"><span>流</span></a></h2><p><strong>自适应布局</strong>：对具有自适应特性一类布局的统称，包含较广范</p><p><strong>流体布局</strong>：较狭义，包含较少</p><p>例如&quot;流体布局&quot;往往是具有自适应性的，但是表格布局虽然也能设置为100%自适应，但是表格并不是流体布局</p><h2 id="table" tabindex="-1"><a class="header-anchor" href="#table"><span>table</span></a></h2><p>table比CSS还要老，在CSS正式诞生之前会使用 table 对网页进行布局，所以&quot;流&quot;的特性对 table并不适用</p><h1 id="第二章-相关术语" tabindex="-1"><a class="header-anchor" href="#第二章-相关术语"><span>第二章 相关术语</span></a></h1><h2 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器"><span>选择器</span></a></h2><ul><li>类选择器：以 <code>.</code> 开头的选择器</li><li>ID 选择器：以 <code>#</code> 开头的选择器</li><li>属性选择器：类似 <code>[title]{}</code>、<code>[title~=&quot;css-world&quot;]</code></li><li>伪类选择器：指前面有<strong>一个</strong>英文冒号<code>:</code>的选择器，如 <code>:first-child</code>、<code>:last-child</code></li><li>伪元素选择器：指前面有<strong>两个</strong>英文冒号<code>::</code> 的选择器，如<code>::before</code>、<code>::after</code></li></ul><h1 id="第三章-流、元素与基本尺寸" tabindex="-1"><a class="header-anchor" href="#第三章-流、元素与基本尺寸"><span>第三章 流、元素与基本尺寸</span></a></h1><p>标签种类众多，但通常分为两类：块级元素、内联元素</p><h2 id="块级元素" tabindex="-1"><a class="header-anchor" href="#块级元素"><span>块级元素</span></a></h2><ul><li>块级元素基本特性：<strong>一行</strong>只能<strong>显示一个</strong>元素，<strong>多个</strong>块级元素则<strong>换行显示</strong></li></ul><blockquote><p><strong>注意</strong>：块级元素和 <code>display</code> 为 <code>block</code> 的元素不是一个概念</p><ul><li><p><code>&lt;li&gt;</code>元素默认的<code>display</code>值是<code>list-item</code></p></li><li><p><code>&lt;table&gt;</code>元素默认的<code>display</code>值是<code>table</code></p></li></ul><p>虽然它们的 <code>display</code> 不为 <code>block</code> 但是它们均是“块级元素”</p></blockquote><h3 id="盒子概念-★" tabindex="-1"><a class="header-anchor" href="#盒子概念-★"><span>盒子概念 ★</span></a></h3><p>CSS 的设置者为设计了盒子的概念，分为两个盒子：<strong>外在盒子</strong>和<strong>内在盒子</strong></p><ul><li>外在盒子：用来指定元素是块级还是内联。</li><li><u>内在盒子：指定宽高和内容</u></li></ul><p><code>inline-block</code> 的外在盒子是内联的，而内在盒子是块级的</p><h2 id="width-height-作用细节" tabindex="-1"><a class="header-anchor" href="#width-height-作用细节"><span>width/height 作用细节</span></a></h2><h3 id="width-auto-★★★" tabindex="-1"><a class="header-anchor" href="#width-auto-★★★"><span>width:auto ★★★</span></a></h3><h4 id="表现形式" tabindex="-1"><a class="header-anchor" href="#表现形式"><span>表现形式</span></a></h4><p><code>auto</code> 是宽度的默认值，它会有有下面几种<strong>表现形式</strong></p><ul><li>充分利用：对于块级元素如【 <code>div</code>、<code>p</code>】它们会自动铺满整个容器</li><li>收缩包裹：对于【浮动、绝对定位、inline-block、table】元素拥有包裹特性</li><li>收缩到最小：对于【table-layout 为 auto 的表格】 <ul><li>这个复现不来，不过另一种方式能复现出，如下：</li><li>当父级 relative，并且宽度很小，子级 absolute 元素的宽度会收缩到最小</li></ul></li><li>超出容器：对于【white-space: nowrap】的情况</li></ul><h4 id="决定要素" tabindex="-1"><a class="header-anchor" href="#决定要素"><span>决定要素</span></a></h4><p>盒子分“外在盒子”和“内在盒子”，那么宽度也可以说尺寸也分“外部尺寸”和“内部尺寸”</p><ul><li><p>外部尺寸：元素的宽度由外部元素确定</p><ol><li>正常流宽度：比如在一个容器中放一个 div，那么它的宽度就是由外部容器的宽度决定</li><li>格式化宽度：对于【绝对定位模型，如 position 为 absolute 或 fixed 的非替换元素，并且存在 top/bottom 或 left/right 属性时】，如果没有这些定位属性，则会出现包裹性</li></ol></li><li><p>内部尺寸：元素的宽度由内部元素确定</p><ol start="0"><li><p>当元素内部无内容时，宽度为 0，则应用的是 “内部尺寸”</p></li><li><p>包裹性</p></li><li><p>首选最小宽度</p></li><li><p>最大宽度</p><p>以上内容已理解，暂不记录</p></li></ol></li></ul><h3 id="盒子尺寸" tabindex="-1"><a class="header-anchor" href="#盒子尺寸"><span>盒子尺寸</span></a></h3><p>在“盒子概念”那个章节说过，width 是作用于 “内在盒子”的，而本节我们指出内在盒子又包含四种盒子：</p><ul><li>content box</li><li>padding box</li><li>border box</li><li>margin box：它是透明的</li></ul><p>在 css2.1 规范中，曾明确指出 content box 围绕着 width 和 height 给定的矩阵</p><p>因此当出现 padding、border，元素的尺寸会与 width、height给定的大小不一样</p><h3 id="宽度分离原则" tabindex="-1"><a class="header-anchor" href="#宽度分离原则"><span>宽度分离原则</span></a></h3><p>当出现上述情况时，我们为了充分利用“流”自适应的特性，需要采取宽度分离原则，即<strong>外层元素决定宽度，内层决定 padding、border 等</strong></p><h3 id="box-sizing-★" tabindex="-1"><a class="header-anchor" href="#box-sizing-★"><span>box-sizing ★</span></a></h3><p>width 和 height 会指定在 content box 上，若有人不想嵌套使用宽度分离原则可以尝试让宽高制定在 border box 上，也就是 box-sizing: border-box</p><p>注：【不建议无脑使用 border-box】，只用在以下情景</p><p>主要应用于 input 和 textarea 的自适应问题，它们都是替换元素，替换元素的尺寸由内部元素决定，不论 display 属性为 inline 或 block。</p><p>对于普通元素来说，如果设置 display 为 block，它就具有流动性，宽度由外部容器决定，但是替换元素不行，为了自适应，我们必须使用 width: 100%，但是它们又有 border 值，所以做不到完全自适应，这时就需要使用到 box-sizing 了</p><h3 id="height" tabindex="-1"><a class="header-anchor" href="#height"><span>height</span></a></h3><p>height 比较简单，它们默认值也为 auto，内容有多高他就多高</p><p>只需要注意 height: 100% 这个值，因为它无效，除非你给 html，body 都设置了 100%</p><p>其实这是一个“未定义问题”，对于 width 来说如果宽度默认未设置，也就是 auto，则宽度值就为真实的宽度值，但对于 height，如果未设置则高度计算就会使用 auto，那么 <code>auto * 100%</code> 必然会报错，所以 height: 100% 会没有效果</p><h4 id="宽高计算-★" tabindex="-1"><a class="header-anchor" href="#宽高计算-★"><span>宽高计算 ★</span></a></h4><ul><li>对于非绝对定位元素： <ul><li>宽高计算依赖于父级元素的 content-box 大小</li></ul></li><li>对于决定定位元素： <ul><li>宽高计算依赖于父级元素的 padding-box 大小</li></ul></li></ul>',47)]))}const r=t(o,[["render",n],["__file","《CSS世界》阅读笔记.html.vue"]]),p=JSON.parse('{"path":"/knowledge/%E5%89%8D%E7%AB%AF/CSS%E4%B8%96%E7%95%8C/%E3%80%8ACSS%E4%B8%96%E7%95%8C%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html","title":"《CSS世界》阅读笔记","lang":"zh-CN","frontmatter":{"description":"[toc] 《CSS世界》阅读笔记 第一章 概述 流 自适应布局：对具有自适应特性一类布局的统称，包含较广范 流体布局：较狭义，包含较少 例如\\"流体布局\\"往往是具有自适应性的，但是表格布局虽然也能设置为100%自适应，但是表格并不是流体布局 table table比CSS还要老，在CSS正式诞生之前会使用 table 对网页进行布局，所以\\"流\\"的特性对...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/my-docs/knowledge/%E5%89%8D%E7%AB%AF/CSS%E4%B8%96%E7%95%8C/%E3%80%8ACSS%E4%B8%96%E7%95%8C%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:title","content":"《CSS世界》阅读笔记"}],["meta",{"property":"og:description","content":"[toc] 《CSS世界》阅读笔记 第一章 概述 流 自适应布局：对具有自适应特性一类布局的统称，包含较广范 流体布局：较狭义，包含较少 例如\\"流体布局\\"往往是具有自适应性的，但是表格布局虽然也能设置为100%自适应，但是表格并不是流体布局 table table比CSS还要老，在CSS正式诞生之前会使用 table 对网页进行布局，所以\\"流\\"的特性对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-17T14:21:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-17T14:21:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《CSS世界》阅读笔记\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-17T14:21:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[{"level":2,"title":"流","slug":"流","link":"#流","children":[]},{"level":2,"title":"table","slug":"table","link":"#table","children":[]},{"level":2,"title":"选择器","slug":"选择器","link":"#选择器","children":[]},{"level":2,"title":"块级元素","slug":"块级元素","link":"#块级元素","children":[{"level":3,"title":"盒子概念 ★","slug":"盒子概念-★","link":"#盒子概念-★","children":[]}]},{"level":2,"title":"width/height 作用细节","slug":"width-height-作用细节","link":"#width-height-作用细节","children":[{"level":3,"title":"width:auto ★★★","slug":"width-auto-★★★","link":"#width-auto-★★★","children":[]},{"level":3,"title":"盒子尺寸","slug":"盒子尺寸","link":"#盒子尺寸","children":[]},{"level":3,"title":"宽度分离原则","slug":"宽度分离原则","link":"#宽度分离原则","children":[]},{"level":3,"title":"box-sizing ★","slug":"box-sizing-★","link":"#box-sizing-★","children":[]},{"level":3,"title":"height","slug":"height","link":"#height","children":[]}]}],"git":{"createdTime":1739802080000,"updatedTime":1739802080000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":1,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":4.38,"words":1313},"filePathRelative":"knowledge/前端/CSS世界/《CSS世界》阅读笔记.md","localizedDate":"2025年2月17日","excerpt":"<p>[toc]</p>\\n<h1>《CSS世界》阅读笔记</h1>\\n<h1>第一章 概述</h1>\\n<h2>流</h2>\\n<p><strong>自适应布局</strong>：对具有自适应特性一类布局的统称，包含较广范</p>\\n<p><strong>流体布局</strong>：较狭义，包含较少</p>\\n<p>例如\\"流体布局\\"往往是具有自适应性的，但是表格布局虽然也能设置为100%自适应，但是表格并不是流体布局</p>\\n<h2>table</h2>\\n<p>table比CSS还要老，在CSS正式诞生之前会使用 table 对网页进行布局，所以\\"流\\"的特性对 table并不适用</p>\\n<h1>第二章 相关术语</h1>","autoDesc":true}');export{r as comp,p as data};
