import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as r,b as n,e as t,d as l,f as o,r as p,o as s}from"./app-BQR2Y89h.js";const h={};function c(m,e){const i=p("RouteLink");return s(),d("div",null,[e[2]||(e[2]=r('<h1 id="graph-embedding" tabindex="-1"><a class="header-anchor" href="#graph-embedding"><span>Graph Embedding</span></a></h1><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h2><p>用来表示图的，如果一个图有 n 个节点，那么一个最简单的方法就是保存 n 个 n 维的 one-hot 向量。但是这样不经会占据巨额的空间，而且还是会遗失一些信息。下面来看一些相关算法是如何解决这个问题。</p><h2 id="deepwork" tabindex="-1"><a class="header-anchor" href="#deepwork"><span>Deepwork</span></a></h2><p>能学习到图上节点之间的关系，主要在<strong>无向图</strong>上使用</p><h2 id="line" tabindex="-1"><a class="header-anchor" href="#line"><span>LINE</span></a></h2><p>在大规模的图上构建 embedding，以表示节点之间的结构信息</p><ul><li>一阶：局部的结构信息 <ul><li>如果两个节点相连，并且相连的边的权重很大，那么这两个点最后生成的 embedding 会比较相似，这就叫一阶相似性</li></ul></li><li>二阶：节点的邻居。共享邻居的节点可能是相似的 <ul><li>假如某个节点连接了另外 x 个节点，而另一个节点也连接了这 x 节点，那么可以成这两个节点是二阶相似的</li></ul></li></ul><p>既可以在无向图也可以在有向图上做 embedding</p><h2 id="node2vec" tabindex="-1"><a class="header-anchor" href="#node2vec"><span>Node2vec</span></a></h2>',10)),n("p",null,[e[1]||(e[1]=t("参见")),l(i,{to:"/knowledge/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/GraphEmbedding/Node2Vec.html"},{default:o(()=>e[0]||(e[0]=[t("Node2Vec")])),_:1})]),e[3]||(e[3]=n("h2",{id:"struc2vec",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#struc2vec"},[n("span",null,"Struc2vec")])],-1)),e[4]||(e[4]=n("h2",{id:"sdne",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sdne"},[n("span",null,"SDNE")])],-1))])}const g=a(h,[["render",c],["__file","02-GraphEmbedding.html.vue"]]),B=JSON.parse('{"path":"/knowledge/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/02-GraphEmbedding.html","title":"Graph Embedding","lang":"zh-CN","frontmatter":{"description":"Graph Embedding 作用 用来表示图的，如果一个图有 n 个节点，那么一个最简单的方法就是保存 n 个 n 维的 one-hot 向量。但是这样不经会占据巨额的空间，而且还是会遗失一些信息。下面来看一些相关算法是如何解决这个问题。 Deepwork 能学习到图上节点之间的关系，主要在无向图上使用 LINE 在大规模的图上构建 embeddi...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/knowledge/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/02-GraphEmbedding.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:title","content":"Graph Embedding"}],["meta",{"property":"og:description","content":"Graph Embedding 作用 用来表示图的，如果一个图有 n 个节点，那么一个最简单的方法就是保存 n 个 n 维的 one-hot 向量。但是这样不经会占据巨额的空间，而且还是会遗失一些信息。下面来看一些相关算法是如何解决这个问题。 Deepwork 能学习到图上节点之间的关系，主要在无向图上使用 LINE 在大规模的图上构建 embeddi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-17T14:21:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-17T14:21:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Graph Embedding\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-17T14:21:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[{"level":2,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":2,"title":"Deepwork","slug":"deepwork","link":"#deepwork","children":[]},{"level":2,"title":"LINE","slug":"line","link":"#line","children":[]},{"level":2,"title":"Node2vec","slug":"node2vec","link":"#node2vec","children":[]},{"level":2,"title":"Struc2vec","slug":"struc2vec","link":"#struc2vec","children":[]},{"level":2,"title":"SDNE","slug":"sdne","link":"#sdne","children":[]}],"git":{"createdTime":1739802080000,"updatedTime":1739802080000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":1,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":0.92,"words":275},"filePathRelative":"knowledge/人工智能/图神经网络/02-GraphEmbedding.md","localizedDate":"2025年2月17日","excerpt":"\\n<h2>作用</h2>\\n<p>用来表示图的，如果一个图有 n 个节点，那么一个最简单的方法就是保存 n 个 n 维的 one-hot 向量。但是这样不经会占据巨额的空间，而且还是会遗失一些信息。下面来看一些相关算法是如何解决这个问题。</p>\\n<h2>Deepwork</h2>\\n<p>能学习到图上节点之间的关系，主要在<strong>无向图</strong>上使用</p>\\n<h2>LINE</h2>\\n<p>在大规模的图上构建 embedding，以表示节点之间的结构信息</p>\\n<ul>\\n<li>一阶：局部的结构信息\\n<ul>\\n<li>如果两个节点相连，并且相连的边的权重很大，那么这两个点最后生成的 embedding 会比较相似，这就叫一阶相似性</li>\\n</ul>\\n</li>\\n<li>二阶：节点的邻居。共享邻居的节点可能是相似的\\n<ul>\\n<li>假如某个节点连接了另外 x 个节点，而另一个节点也连接了这 x 节点，那么可以成这两个节点是二阶相似的</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{g as comp,B as data};
