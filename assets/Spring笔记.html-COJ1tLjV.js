import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as r,o as i}from"./app-C7f1BNZb.js";const a="/my-docs/assets/image-20200208164428913-ZSmrmpJk.png",o="/my-docs/assets/image-20200208164605046-DT0Bh9Eq.png",s="/my-docs/assets/image-20200808175944279-CftDJvZM.png",p={};function g(l,e){return i(),t("div",null,e[0]||(e[0]=[r('<h1 id="spring-笔记" tabindex="-1"><a class="header-anchor" href="#spring-笔记"><span>Spring 笔记</span></a></h1><h1 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述"><span>一、概述</span></a></h1><h2 id="_1、简介" tabindex="-1"><a class="header-anchor" href="#_1、简介"><span>1、简介</span></a></h2><blockquote><p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。</p></blockquote><blockquote><p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首次在 Apache 2.0 许可下发布。</p></blockquote><blockquote><p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。</p></blockquote><blockquote><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践。</p></blockquote><h2 id="_2、spring核心部分" tabindex="-1"><a class="header-anchor" href="#_2、spring核心部分"><span>2、spring核心部分</span></a></h2><p><strong>（1）aop：面向切片变成，拓展功能不是修改源代码实现</strong></p><p>​ Spring 框架的一个关键组件是<strong>面向方面的程序设计（AOP）<strong>框架。一个程序中跨越多个点的功能被称为</strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。有各种各样常见的很好的关于方面的例子，比如日志记录、声明性事务、安全性，和缓存等等。</p><p>​ 在 OOP 中模块化的关键单元是类，而在 AOP 中模块化的关键单元是方面。AOP 帮助你将横切关注点从它们所影响的对象中分离出来，然而依赖注入帮助你将你的应用程序对象从彼此中分离出来。</p><p>Spring 框架的 AOP 模块提供了面向方面的程序设计实现，可以定义诸如方法拦截器和切入点等，从而使实现功能的代码彻底的解耦出来。使用源码级的元数据，可以用类似于.Net属性的方式合并行为信息到代码中。我将在一个独立的章节中讨论更多关于 <a href="https://www.w3cschool.cn/wkspring/izae1h9w.html" target="_blank" rel="noopener noreferrer">Spring AOP</a> 的概念。</p><p><strong>（2）ioc：控制反转，把对象的创建交给spring配置来实现</strong></p><p>​ Spring 最认同的技术是控制反转的**依赖注入（DI）**模式。控制反转（IoC）是一个通用的概念，它可以用许多不同的方式去表达，依赖注入仅仅是控制反转的一个具体的例子。</p><p>​ 当编写一个复杂的 Java 应用程序时，应用程序类应该尽可能的独立于其他的 Java 类来增加这些类可重用可能性，当进行单元测试时，可以使它们独立于其他类进行测试。依赖注入（或者有时被称为配线）有助于将这些类粘合在一起，并且在同一时间让它们保持独立。</p><p>​ 到底什么是依赖注入？让我们将这两个词分开来看一看。这里将依赖关系部分转化为两个类之间的关联。例如，类 A 依赖于类 B。现在，让我们看一看第二部分，注入。所有这一切都意味着类 B 将通过 IoC 被注入到类 A 中。</p><p>​ 依赖注入可以以向构造函数传递参数的方式发生，或者通过使用 setter 方法 post-construction。由于依赖注入是 Spring 框架的核心部分，所以我将在一个单独的章节中利用很好的例子去解释这一概念。</p><h2 id="_3、spring的体系结构" tabindex="-1"><a class="header-anchor" href="#_3、spring的体系结构"><span>3、spring的体系结构</span></a></h2><figure><img src="'+a+'" alt="image-20200208164428913" tabindex="0" loading="lazy"><figcaption>image-20200208164428913</figcaption></figure><h3 id="_1-核心容器" tabindex="-1"><a class="header-anchor" href="#_1-核心容器"><span>1 核心容器</span></a></h3><p>​ 核心容器由<strong>spring-core，spring-beans，spring-context，spring-context-support和spring-expression</strong>（SpEL，Spring表达式语言，Spring Expression Language）等模块组成</p><ul><li><strong>spring-core</strong>模块提供了框架的基本组成部分，包括 IoC 和依赖注入功能。</li><li><strong>spring-beans</strong> 模块提供 BeanFactory，工厂模式的微妙实现，它移除了编码式单例的需要，并且可以把配置和依赖从实际编码逻辑中解耦。</li><li><strong>context</strong>模块建立在由<strong>core</strong>和 <strong>beans</strong> 模块的基础上建立起来的，它以一种类似于JNDI注册的方式访问对象。Context模块继承自Bean模块，并且添加了国际化（比如，使用资源束）、事件传播、资源加载和透明地创建上下文（比如，通过Servelet容器）等功能。Context模块也支持Java EE的功能，比如EJB、JMX和远程调用等。<strong>ApplicationContext</strong>接口是Context模块的焦点。<strong>spring-context-support</strong>提供了对第三方库集成到Spring上下文的支持，比如缓存（EhCache, Guava, JCache）、邮件（JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker, JasperReports, Velocity）等。</li><li><strong>spring-expression</strong>模块提供了强大的表达式语言，用于在运行时查询和操作对象图。它是JSP2.1规范中定义的统一表达式语言的扩展，支持set和get属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从Spring IoC容器检索对象，还支持列表的投影、选择以及聚合等。</li></ul><p>​ 它们的完整依赖关系如下图所示：</p><figure><img src="'+o+'" alt="image-20200208164605046" tabindex="0" loading="lazy"><figcaption>image-20200208164605046</figcaption></figure><p>如果是maven项目的话可以只引入<code>spring-context</code>，maven会自动引入其他的依赖</p><h3 id="_2-数据访问-集成" tabindex="-1"><a class="header-anchor" href="#_2-数据访问-集成"><span>2 数据访问/集成</span></a></h3><p>数据访问/集成层包括 JDBC，ORM，OXM，JMS 和事务处理模块，它们的细节如下：</p><p>（注：JDBC=Java Data Base Connectivity，ORM=Object Relational Mapping，OXM=Object XML Mapping，JMS=Java Message Service）</p><ul><li><strong>JDBC</strong> 模块提供了JDBC抽象层，它消除了冗长的JDBC编码和对数据库供应商特定错误代码的解析。</li><li><strong>ORM</strong> 模块提供了对流行的对象关系映射API的集成，包括JPA、JDO和Hibernate等。通过此模块可以让这些ORM框架和spring的其它功能整合，比如前面提及的事务管理。</li><li><strong>OXM</strong> 模块提供了对OXM实现的支持，比如JAXB、Castor、XML Beans、JiBX、XStream等。</li><li><strong>JMS</strong> 模块包含生产（produce）和消费（consume）消息的功能。从Spring 4.1开始，集成了spring-messaging模块。。</li><li><strong>事务</strong>模块为实现特殊接口类及所有的 POJO 支持编程式和声明式事务管理。（注：编程式事务需要自己写beginTransaction()、commit()、rollback()等事务管理方法，声明式事务是通过注解或配置由spring自动处理，编程式事务粒度更细）</li></ul><h3 id="_3-web" tabindex="-1"><a class="header-anchor" href="#_3-web"><span>3 Web</span></a></h3><p>Web 层由 Web，Web-MVC，Web-Socket 和 Web-Portlet 组成，它们的细节如下：</p><ul><li><strong>Web</strong> 模块提供面向web的基本功能和面向web的应用上下文，比如多部分（multipart）文件上传功能、使用Servlet监听器初始化IoC容器等。它还包括HTTP客户端以及Spring远程调用中与web相关的部分。。</li><li><strong>Web-MVC</strong> 模块为web应用提供了模型视图控制（MVC）和REST Web服务的实现。Spring的MVC框架可以使领域模型代码和web表单完全地分离，且可以与Spring框架的其它所有功能进行集成。</li><li><strong>Web-Socket</strong> 模块为 WebSocket-based 提供了支持，而且在 web 应用程序中提供了客户端和服务器端之间通信的两种方式。</li><li><strong>Web-Portlet</strong> 模块提供了用于Portlet环境的MVC实现，并反映了spring-webmvc模块的功能。</li></ul><h3 id="_4-其他" tabindex="-1"><a class="header-anchor" href="#_4-其他"><span>4 其他</span></a></h3><p>还有其他一些重要的模块，像 <a href="https://www.w3cschool.cn/wkspring/izae1h9w.html" target="_blank" rel="noopener noreferrer">AOP</a>，Aspects，Instrumentation，Web 和测试模块，它们的细节如下：</p><ul><li><strong>AOP</strong> 模块提供了面向方面的编程实现，允许你定义方法拦截器和切入点对代码进行干净地解耦，从而使实现功能的代码彻底的解耦出来。使用源码级的元数据，可以用类似于.Net属性的方式合并行为信息到代码中。</li><li><strong>Aspects</strong> 模块提供了与 <strong>AspectJ</strong> 的集成，这是一个功能强大且成熟的面向切面编程（AOP）框架。</li><li><strong>Instrumentation</strong> 模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。</li><li><strong>Messaging</strong> 模块为 STOMP 提供了支持作为在应用程序中 WebSocket 子协议的使用。它也支持一个注解编程模型，它是为了选路和处理来自 WebSocket 客户端的 STOMP 信息。</li><li><strong>测试</strong>模块支持对具有 JUnit 或 TestNG 框架的 Spring 组件的测试。</li></ul><h3 id="_5-环境搭建" tabindex="-1"><a class="header-anchor" href="#_5-环境搭建"><span>5 环境搭建</span></a></h3><figure><img src="'+s+'" alt="image-20200808175944279" tabindex="0" loading="lazy"><figcaption>image-20200808175944279</figcaption></figure>',37)]))}const d=n(p,[["render",g],["__file","Spring笔记.html.vue"]]),m=JSON.parse('{"path":"/knowledge/Java/JavaEE/Spring/Spring%E7%AC%94%E8%AE%B0.html","title":"Spring 笔记","lang":"zh-CN","frontmatter":{"description":"Spring 笔记 一、概述 1、简介 Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。 Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首次在 Apache 2.0 许可下...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/my-docs/knowledge/Java/JavaEE/Spring/Spring%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:title","content":"Spring 笔记"}],["meta",{"property":"og:description","content":"Spring 笔记 一、概述 1、简介 Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。 Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首次在 Apache 2.0 许可下..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-22T12:24:50.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-22T12:24:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 笔记\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-22T12:24:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[{"level":2,"title":"1、简介","slug":"_1、简介","link":"#_1、简介","children":[]},{"level":2,"title":"2、spring核心部分","slug":"_2、spring核心部分","link":"#_2、spring核心部分","children":[]},{"level":2,"title":"3、spring的体系结构","slug":"_3、spring的体系结构","link":"#_3、spring的体系结构","children":[{"level":3,"title":"1 核心容器","slug":"_1-核心容器","link":"#_1-核心容器","children":[]},{"level":3,"title":"2 数据访问/集成","slug":"_2-数据访问-集成","link":"#_2-数据访问-集成","children":[]},{"level":3,"title":"3 Web","slug":"_3-web","link":"#_3-web","children":[]},{"level":3,"title":"4 其他","slug":"_4-其他","link":"#_4-其他","children":[]},{"level":3,"title":"5 环境搭建","slug":"_5-环境搭建","link":"#_5-环境搭建","children":[]}]}],"git":{"createdTime":1739802080000,"updatedTime":1740227090000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":2,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":7,"words":2100},"filePathRelative":"knowledge/Java/JavaEE/Spring/Spring笔记.md","localizedDate":"2025年2月17日","excerpt":"\\n<h1>一、概述</h1>\\n<h2>1、简介</h2>\\n<blockquote>\\n<p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。</p>\\n</blockquote>\\n<blockquote>\\n<p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首次在 Apache 2.0 许可下发布。</p>\\n</blockquote>\\n<blockquote>\\n<p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。</p>\\n</blockquote>","autoDesc":true}');export{d as comp,m as data};
