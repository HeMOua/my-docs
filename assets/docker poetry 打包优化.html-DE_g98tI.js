import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-DOkRBtKU.js";const l="/assets/av0a0-PlH96RVF.webp",t={};function p(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<blockquote><p>译原文：<a href="https://blog.csdn.net/2201_75632987/article/details/142000817" target="_blank" rel="noopener noreferrer">使用Docker部署由Poetry管理的Python项目的最佳实践</a></p><p>原文：<a href="https://medium.com/@albertazzir/blazing-fast-python-docker-builds-with-poetry-a78a66f5aed0" target="_blank" rel="noopener noreferrer">Blazing fast Python Docker builds with Poetry</a></p></blockquote><h2 id="幼稚的做法" tabindex="-1"><a class="header-anchor" href="#幼稚的做法"><span>幼稚的做法</span></a></h2><p>我们使用的镜像要有python环境、要下载Poetry、要把我们的代码复制进去、下载依赖和设置项目入口，最简单的做法如下：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> python:3.10.15-bookworm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pip install poetry</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> . .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> poetry install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;poetry&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;run&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;python&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-m&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;annapurna.main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在一些项目和教程中看到这样的Dockerfile，非常简单，也容易理解，通过docker build .就能构建起来。但是随着你项目的发展，它会导致构建过程变得复杂和缓慢，镜像也会非常大，接下来我们将会看到如何逐步优化，充分利用缓存加速构建过程和以及减少镜像大小的方法。</p><h2 id="v0-1-简单优化" tabindex="-1"><a class="header-anchor" href="#v0-1-简单优化"><span>v0.1 简单优化</span></a></h2><ul><li>固定 poetry 版本</li><li>编写 <code>.dockerignore</code>，忽略 .venv 等其他非代码文件</li><li>使用 <code>poetry install --without dev</code> 不安装非生产环境必须得依赖</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> python:3.10.15-bookworm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pip install poetry==1.4.2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pyproject.toml poetry.lock ./</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> annapurna ./annapurna</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> poetry install --without dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;poetry&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;run&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;python&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-m&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;annapurna.main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v0-2-清除-poetry-缓存" tabindex="-1"><a class="header-anchor" href="#v0-2-清除-poetry-缓存"><span>v0.2 清除 poetry 缓存</span></a></h2><p>以下优化不推荐，因为缓存在后续的优化方法中可以利用到</p><ul><li>Poetry支持 <code>--no-cache</code> 选项，不产生缓存，但是我可能不会使用它，后面会说明原因（为了利用另一种优化方式【译者】）。</li><li>在 RUN 中的命令 <code>poetry install</code> 之后，删除缓存目录，确保 <code>poetry install</code> 和 <code>rm</code> 在同一行命令中，否则 docker 层缓存还会出现在 <code>rm</code> 语句之间的层中</li></ul><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> python:3.10.15-bookworm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pip install poetry==1.4.2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> POETRY_NO_INTERACTION=1 \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    POETRY_VIRTUALENVS_IN_PROJECT=1 \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    POETRY_VIRTUALENVS_CREATE=1 \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    POETRY_CACHE_DIR=/tmp/poetry_cache</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pyproject.toml poetry.lock ./</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> annapurna ./annapurna</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> poetry install --without dev &amp;&amp; rm -rf $POETRY_CACHE_DIR</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;poetry&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;run&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;python&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-m&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;annapurna.main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v0-3-拷贝代码前完成依赖安装" tabindex="-1"><a class="header-anchor" href="#v0-3-拷贝代码前完成依赖安装"><span>v0.3 拷贝代码前完成依赖安装</span></a></h2><blockquote><p>对于 docker 缓存存构建，有如下条件：</p><p><strong>COPY 和 ADD 指令：</strong></p><ul><li>如果复制的文件没有改变（即文件的内容和上一次构建时相同），Docker 将使用缓存层。</li><li>如果任何一个文件发生改变（或时间戳更新），则缓存失效，Docker 会重新执行该指令及其后的所有指令。</li></ul></blockquote><p>由于 COPY 命令在 RUN poetry install 命令之前，所以每当我们修改完代码后，缓存层必会失效，导致每次打包都会重新下载依赖，通过调整这两个命令的顺序，既可优化，不过这要求我们先将依赖 toml 文件先复制过去</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> python:3.10.15-bookworm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pip install poetry==1.4.2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> POETRY_NO_INTERACTION=1 \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    POETRY_VIRTUALENVS_IN_PROJECT=1 \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    POETRY_VIRTUALENVS_CREATE=1 \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    POETRY_CACHE_DIR=/tmp/poetry_cache</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pyproject.toml poetry.lock ./</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> poetry install --without dev --no-root &amp;&amp; rm -rf $POETRY_CACHE_DIR</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> annapurna ./annapurna</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> poetry install --without dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;poetry&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;run&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;python&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-m&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;annapurna.main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>额外的 <code>RUN poetry install --without dev</code> 指令用于在虚拟环境中安装你的项目目录。这是个很用于的例子，如果你需要安装一些自定义脚本的话。需要不需要这一行取决于你的项目。但是无论如何，执行这一步之前你的项目依赖就已经安装好了，这一步的运行速度也会非常快。</p><h2 id="v0-4-多阶段构建" tabindex="-1"><a class="header-anchor" href="#v0-4-多阶段构建"><span>v0.4 多阶段构建</span></a></h2><p>到目前为止，我们的构建速度已经非常快了，但是我们最终的镜像还是很大。我们可以尝试使用多阶段构建来解决。优化的关键在于对于特定的任务阶段选择正确的基础镜像来完成：</p><ul><li><code>python:3.10.15-bookworm</code>：是一个比较大的镜像，因为它包含很多开发依赖，因此我们将使用它来安装虚拟环境。</li><li><code>python:3.10.15-slim-bookworm</code>：是一个更小的镜像，这个镜像中只有足以运行Python的最小镜像，我们将会用它来运行我们的应用。</li></ul><p>得益于多阶段构建，我们可以把一个阶段的信息传递到另一个阶段，特别是正在构建的虚拟环境：</p><p>Poetry不必安装在用于程序运行的阶段。事实上当虚拟环境构建完成，Poetry 对于你的 Python 应用程序来说就编程了不必要的依赖，我们只需要操作环境变量（如VIRTUAL_ENV）就能让 Python 识别正确的虚拟环境。</p><p>为了简化，我移除了第二个安装步骤 <code>RUN poetry install --without dev</code>，我们示例项目也不需要它（不用让poetry 把你写代码的项目目录安装进虚拟环境中，我们在下载完依赖之后虚拟环境算是构建好了，写代码的项目目录时被COPY到镜像中去的【译者】）。不过，如果需要的话，仍然可以在运行镜像的时候用一条指令来添加它：<code>RUN pip install poetry &amp;&amp; poetry install --without dev &amp;&amp; pip uninstall poetry</code>。</p><blockquote><p>当Dockerfile变得复杂的时候，我建议使用Buildkit，这是嵌入Docker CLI的构建套件。它能帮助你快速和安全的构建。</p></blockquote><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DOCKER_BUILDKIT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">1</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --target=runtime</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># The builder image, used to build the virtual environment</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> python:3.10.15-bookworm </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> builder</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pip install poetry==1.4.2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> POETRY_NO_INTERACTION=1 \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    POETRY_VIRTUALENVS_IN_PROJECT=1 \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    POETRY_VIRTUALENVS_CREATE=1 \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    POETRY_CACHE_DIR=/tmp/poetry_cache</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pyproject.toml poetry.lock ./</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> touch README.md</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> poetry install --without dev --no-root &amp;&amp; rm -rf $POETRY_CACHE_DIR</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># The runtime image, used to just run the code provided its virtual environment</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> python:3.11-slim-buster </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> runtime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> VIRTUAL_ENV=/app/.venv \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    PATH=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/app/.venv/bin:$PATH&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --from=builder \${VIRTUAL_ENV} \${VIRTUAL_ENV}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> annapurna ./annapurna</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;python&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-m&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;annapurna.main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v0-5-buildkit缓存挂载" tabindex="-1"><a class="header-anchor" href="#v0-5-buildkit缓存挂载"><span>v0.5 Buildkit缓存挂载</span></a></h2><p>我们减小了镜像大小，让只更改代码时的构建速度飞快，我们还能做什么？我们还可以在依赖改变让构建速度也很快。</p><p>这个技巧并不广为人知，它相较于之前介绍的那些功能来说比较新颖。它利用了Buildkit缓存挂载功能，Buildkit挂载并管理一个用于缓存的文件夹，有趣的时这个缓存会在多次构建之间持续存在。</p><p>通过利用此功能和Poetry的缓存相结合（现在你明白为什么我想要保留缓存了吧？），我们基本上获得了一个每次构建项目时都可以重用的依赖缓存。这样在相同的环境中我们多次构建相同的镜像，构建依赖的过程也能很快。</p><p>注意在安装完依赖之后Poetry缓存不会被清理，不然无法在构建过程中存储和重用缓存。这很好，因为Building Kit不会将托管缓存持久化在构建的图像中（另外，它甚至不是我们的运行时镜像）。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> python:3.10.15-bookworm </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> builder</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pip install poetry==1.4.2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> POETRY_NO_INTERACTION=1 \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    POETRY_VIRTUALENVS_IN_PROJECT=1 \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    POETRY_VIRTUALENVS_CREATE=1 \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    POETRY_CACHE_DIR=/tmp/poetry_cache</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pyproject.toml poetry.lock ./</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> touch README.md</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --mount=type=cache,target=$POETRY_CACHE_DIR poetry install --without dev --no-root</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> python:3.11-slim-buster </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> runtime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> VIRTUAL_ENV=/app/.venv \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    PATH=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/app/.venv/bin:$PATH&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --from=builder \${VIRTUAL_ENV} \${VIRTUAL_ENV}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> annapurna ./annapurna</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;python&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-m&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;annapurna.main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置-buildkit" tabindex="-1"><a class="header-anchor" href="#配置-buildkit"><span>配置 BuildKit</span></a></h2><p>若要调整 Docker 守护程序的 BuildKit 设置，请按照以下说明操作。</p><p>从<a href="https://docs.docker.com/develop/develop-images/build_enhancements/#to-enable-buildkit-builds" target="_blank" rel="noopener noreferrer">这些文档</a>中了解部分命令行的操作。在 Powershell 中，您可以按以下方式操作：</p><ol><li>打开文件，在命令行上，最简单的方法是：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>notepad &quot;$env:USERPROFILE\\.docker\\daemon.json&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>将<code>&quot;buildkit&quot;</code>的值更改为<code>false</code>，使其看起来像这样：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;registry-mirrors&quot;: [],</span></span>
<span class="line"><span>  &quot;insecure-registries&quot;: [],</span></span>
<span class="line"><span>  &quot;debug&quot;: true,</span></span>
<span class="line"><span>  &quot;experimental&quot;: false,</span></span>
<span class="line"><span>  &quot;features&quot;: {</span></span>
<span class="line"><span>    &quot;buildkit&quot;: false</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>重新启动Docker服务：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Restart-Service *docker*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><p>或者，在Docker Desktop for Windows应用程序中：</p><p>打开仪表板 &gt; 设置:</p><p>选择<strong>Docker Engine</strong>并编辑 json<code>&quot;features&quot;</code>字段，如果它已经为<code>false</code>，则无需更改：</p><figure><img src="`+l+'" alt="Docker Desktop for Windows应用程序的屏幕截图" tabindex="0" loading="lazy"><figcaption>Docker Desktop for Windows应用程序的屏幕截图</figcaption></figure>',46)]))}const k=i(t,[["render",p],["__file","docker poetry 打包优化.html.vue"]]),o=JSON.parse('{"path":"/knowledge/%E5%AE%B9%E5%99%A8%E5%8C%96_%E7%BC%96%E6%8E%92/Docker/docker%20poetry%20%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96.html","title":"","lang":"zh-CN","frontmatter":{"description":"译原文：使用Docker部署由Poetry管理的Python项目的最佳实践 原文：Blazing fast Python Docker builds with Poetry 幼稚的做法 我们使用的镜像要有python环境、要下载Poetry、要把我们的代码复制进去、下载依赖和设置项目入口，最简单的做法如下： 在一些项目和教程中看到这样的Dockerfi...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/knowledge/%E5%AE%B9%E5%99%A8%E5%8C%96_%E7%BC%96%E6%8E%92/Docker/docker%20poetry%20%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:description","content":"译原文：使用Docker部署由Poetry管理的Python项目的最佳实践 原文：Blazing fast Python Docker builds with Poetry 幼稚的做法 我们使用的镜像要有python环境、要下载Poetry、要把我们的代码复制进去、下载依赖和设置项目入口，最简单的做法如下： 在一些项目和教程中看到这样的Dockerfi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-12T14:50:48.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-12T14:50:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-12T14:50:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[{"level":2,"title":"幼稚的做法","slug":"幼稚的做法","link":"#幼稚的做法","children":[]},{"level":2,"title":"v0.1 简单优化","slug":"v0-1-简单优化","link":"#v0-1-简单优化","children":[]},{"level":2,"title":"v0.2 清除 poetry 缓存","slug":"v0-2-清除-poetry-缓存","link":"#v0-2-清除-poetry-缓存","children":[]},{"level":2,"title":"v0.3 拷贝代码前完成依赖安装","slug":"v0-3-拷贝代码前完成依赖安装","link":"#v0-3-拷贝代码前完成依赖安装","children":[]},{"level":2,"title":"v0.4 多阶段构建","slug":"v0-4-多阶段构建","link":"#v0-4-多阶段构建","children":[]},{"level":2,"title":"v0.5 Buildkit缓存挂载","slug":"v0-5-buildkit缓存挂载","link":"#v0-5-buildkit缓存挂载","children":[]},{"level":2,"title":"配置 BuildKit","slug":"配置-buildkit","link":"#配置-buildkit","children":[]}],"git":{"createdTime":1741791048000,"updatedTime":1741791048000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":1,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":6.25,"words":1875},"filePathRelative":"knowledge/容器化&编排/Docker/docker poetry 打包优化.md","localizedDate":"2025年3月12日","excerpt":"<blockquote>\\n<p>译原文：<a href=\\"https://blog.csdn.net/2201_75632987/article/details/142000817\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">使用Docker部署由Poetry管理的Python项目的最佳实践</a></p>\\n<p>原文：<a href=\\"https://medium.com/@albertazzir/blazing-fast-python-docker-builds-with-poetry-a78a66f5aed0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Blazing fast Python Docker builds with Poetry</a></p>\\n</blockquote>","autoDesc":true}');export{k as comp,o as data};
