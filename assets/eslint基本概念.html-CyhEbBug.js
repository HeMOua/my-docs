import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as n,o as a}from"./app-BQR2Y89h.js";const l={};function p(r,e){return a(),i("div",null,e[0]||(e[0]=[n('<h1 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint"><span>ESLint</span></a></h1><blockquote><p>ESLint 是一个可配置的 JavaScript linter。它可以帮助你发现并修复 JavaScript 代码中的问题。问题可以是任何事情，从潜在的运行时错误到不遵循最佳实践，再到样式问题。</p></blockquote><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><h3 id="规则" tabindex="-1"><a class="header-anchor" href="#规则"><span>规则</span></a></h3><p>规则是 ESLint 的核心构建块。规则验证你的代码是否满足特定期望，以及如果不满足该期望该怎么办。规则还可以包含特定于该规则的其他配置选项。</p><p>ESLint 包含数百条可供使用的内置规则。还可以创建自定义规则或使用其他人通过 <code>plugins</code> 创建的规则。</p><h4 id="规则修复" tabindex="-1"><a class="header-anchor" href="#规则修复"><span>规则修复</span></a></h4><ul><li><p>规则可以选择为他们发现的违规行为提供修复。修复安全地纠正违规行为，而无需更改应用逻辑。</p></li><li><p>修复程序可以通过 <code>--fix 命令行选项</code> 或 <code>编辑器扩展</code> 自动应用。</p></li><li><p>可能提供修复的规则在 规则 中用 🔧 标记。</p></li></ul><h4 id="规则建议" tabindex="-1"><a class="header-anchor" href="#规则建议"><span>规则建议</span></a></h4><ul><li><p>除了提供修复之外或代替提供修复之外，规则还可以选择提供建议。建议与修复有两个不同之处：</p><ul><li>建议可能会更改应用逻辑，因此无法自动应用。</li><li>建议无法通过 ESLint CLI 进行应用，只能通过编辑器集成使用。</li></ul></li><li><p>可能提供建议的规则在 规则 中用💡标记。</p></li></ul><h3 id="配置规则" tabindex="-1"><a class="header-anchor" href="#配置规则"><span>配置规则</span></a></h3><p>1、配置文件</p><p>ESLint 配置文件是在项目中放置 ESLint 配置的位置。可以包含内置规则、希望它们如何执行、具有自定义规则的插件、可共享配置、希望规则应用到哪些文件等等。</p><p>2、共享的配置</p><p>共享的配置是指一些可以被其他项目引用并复用的 ESLint 配置文件。这些配置通常包含了一组规则、环境设置、插件等，<em><strong>目的是让多个项目共享相同的配置</strong></em>，减少每个项目中重复编写 ESLint 配置的工作。</p><p>3、插件</p><p>ESLint 插件是一个 npm 模块，可以包含一组 ESLint 规则、配置、处理器和环境。插件通常包含自定义规则。</p><p>4、共享的配置和插件的区别</p><ul><li><p><strong>共享的配置</strong> 主要用于统一多个项目的 ESLint 配置，方便维护一致性。</p></li><li><p><strong>插件</strong> 用于扩展 ESLint 的规则功能，可以为特定框架或库提供支持，或者定义自定义的代码质量规则。</p></li></ul><h3 id="解析器" tabindex="-1"><a class="header-anchor" href="#解析器"><span>解析器</span></a></h3><p>ESLint 解析器将代码转换为 ESLint 可以计算的抽象语法树。默认情况下，ESLint 使用内置的 Espree 解析器，它与标准 JavaScript 运行时和版本兼容。</p><p>自定义解析器让 ESLint 解析非标准 JavaScript 语法。通常，自定义解析器作为可共享配置或插件的一部分包含在内，因此你不必直接使用它们。</p><p>例如，<code>@typescript-eslint/parser</code> 是 typescript-eslint 项目中包含的自定义解析器，可让 ESLint 解析 TypeScript 代码。</p><h3 id="自定义处理器" tabindex="-1"><a class="header-anchor" href="#自定义处理器"><span>自定义处理器</span></a></h3><p>ESLint 处理器从其他类型的文件中提取 JavaScript 代码，然后让 ESLint 检测 JavaScript 代码。或者，你可以在使用 ESLint 解析 JavaScript 代码之前使用处理器来操作 JavaScript 代码。</p><p>例如，<code>@eslint/markdown</code> 包含一个自定义处理器，可让你在 Markdown 代码块内检查 JavaScript 代码。</p><h3 id="格式化" tabindex="-1"><a class="header-anchor" href="#格式化"><span>格式化</span></a></h3><p>ESLint 格式化程序控制 CLI 中 linting 结果的外观。</p><h2 id="词汇表" tabindex="-1"><a class="header-anchor" href="#词汇表"><span>词汇表</span></a></h2><h3 id="严重性" tabindex="-1"><a class="header-anchor" href="#严重性"><span>严重性</span></a></h3><p>如果有的话，规则配置为运行什么级别的报告。</p><p>ESLint 支持三个严重级别：</p><ul><li><p><code>&quot;off&quot; (0)</code>：不要运行该规则。</p></li><li><p><code>&quot;warn&quot; (1)</code>：运行规则，但不要因其违规行为而以非零状态代码退出（不包括 --max-warnings）</p></li><li><p><code>&quot;error&quot; (2)</code>：运行规则，如果产生任何违规，则以非零状态代码退出</p></li></ul><h3 id="内联配置" tabindex="-1"><a class="header-anchor" href="#内联配置"><span>内联配置</span></a></h3><p>内联配置使用与 配置文件 类似的语法来按名称、新严重性以及可选的规则新选项指定任意数量的规则。</p><p>例如，以下内联配置注释同时禁用 eqeqeq 规则并将 curly 规则设置为 &quot;error&quot;：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* eslint eqeqeq: &quot;off&quot;, curly: &quot;error&quot; */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',37)]))}const c=t(l,[["render",p],["__file","eslint基本概念.html.vue"]]),h=JSON.parse('{"path":"/knowledge/%E5%89%8D%E7%AB%AF/ESLint/eslint%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html","title":"ESLint","lang":"zh-CN","frontmatter":{"description":"ESLint ESLint 是一个可配置的 JavaScript linter。它可以帮助你发现并修复 JavaScript 代码中的问题。问题可以是任何事情，从潜在的运行时错误到不遵循最佳实践，再到样式问题。 核心概念 规则 规则是 ESLint 的核心构建块。规则验证你的代码是否满足特定期望，以及如果不满足该期望该怎么办。规则还可以包含特定于该规则...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/knowledge/%E5%89%8D%E7%AB%AF/ESLint/eslint%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:title","content":"ESLint"}],["meta",{"property":"og:description","content":"ESLint ESLint 是一个可配置的 JavaScript linter。它可以帮助你发现并修复 JavaScript 代码中的问题。问题可以是任何事情，从潜在的运行时错误到不遵循最佳实践，再到样式问题。 核心概念 规则 规则是 ESLint 的核心构建块。规则验证你的代码是否满足特定期望，以及如果不满足该期望该怎么办。规则还可以包含特定于该规则..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-17T14:21:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-17T14:21:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ESLint\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-17T14:21:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[{"level":2,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[{"level":3,"title":"规则","slug":"规则","link":"#规则","children":[]},{"level":3,"title":"配置规则","slug":"配置规则","link":"#配置规则","children":[]},{"level":3,"title":"解析器","slug":"解析器","link":"#解析器","children":[]},{"level":3,"title":"自定义处理器","slug":"自定义处理器","link":"#自定义处理器","children":[]},{"level":3,"title":"格式化","slug":"格式化","link":"#格式化","children":[]}]},{"level":2,"title":"词汇表","slug":"词汇表","link":"#词汇表","children":[{"level":3,"title":"严重性","slug":"严重性","link":"#严重性","children":[]},{"level":3,"title":"内联配置","slug":"内联配置","link":"#内联配置","children":[]}]}],"git":{"createdTime":1739802080000,"updatedTime":1739802080000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":1,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":3.47,"words":1041},"filePathRelative":"knowledge/前端/ESLint/eslint基本概念.md","localizedDate":"2025年2月17日","excerpt":"\\n<blockquote>\\n<p>ESLint 是一个可配置的 JavaScript linter。它可以帮助你发现并修复 JavaScript 代码中的问题。问题可以是任何事情，从潜在的运行时错误到不遵循最佳实践，再到样式问题。</p>\\n</blockquote>\\n<h2>核心概念</h2>\\n<h3>规则</h3>\\n<p>规则是 ESLint 的核心构建块。规则验证你的代码是否满足特定期望，以及如果不满足该期望该怎么办。规则还可以包含特定于该规则的其他配置选项。</p>\\n<p>ESLint 包含数百条可供使用的内置规则。还可以创建自定义规则或使用其他人通过 <code>plugins</code> 创建的规则。</p>","autoDesc":true}');export{c as comp,h as data};
