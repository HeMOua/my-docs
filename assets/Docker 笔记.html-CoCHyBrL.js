import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as e,b as i,e as a,d as h,f as d,r as k,o as r}from"./app-BQR2Y89h.js";const p="/assets/image-20200129184447695-CgOc63vQ.png",c="/assets/image-20200129184525893-DJRE7PBE.png",o="/assets/image-20200129184538197-CHX_41C2.png",g="/assets/image-20210731155649535-BEeuld5s.png",m="/assets/image-20220119181219123-CsFubBKY.png",u="/assets/image-20210731173541846-BSs8iNsM.png",A="/assets/image-20210731173746910-BC6oDeU2.png",y="/assets/image-20210731173809877-BuXU9ut3.png",v="/assets/image-20200130145554064-DAkCbpKN.png",F="/assets/image-20200208102836018-DyWkqpdY.png",b="/assets/image-20200208102425311-PZIoGneU.png",C="/assets/image-20200208103128938-DORjMH49.png",B={};function f(_,s){const n=k("font");return r(),t("div",null,[s[3]||(s[3]=e('<h1 id="docker-教程" tabindex="-1"><a class="header-anchor" href="#docker-教程"><span>Docker 教程</span></a></h1><h2 id="_1、简介" tabindex="-1"><a class="header-anchor" href="#_1、简介"><span>1、简介</span></a></h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p><p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p><p>运行中的这个镜像称为容器，容器启动是非常快速的。</p><figure><img src="'+p+'" alt="image-20200129184447695" tabindex="0" loading="lazy"><figcaption>image-20200129184447695</figcaption></figure><figure><img src="'+c+'" alt="image-20200129184525893" tabindex="0" loading="lazy"><figcaption>image-20200129184525893</figcaption></figure><figure><img src="'+o+`" alt="image-20200129184538197" tabindex="0" loading="lazy"><figcaption>image-20200129184538197</figcaption></figure><h2 id="_2、核心概念" tabindex="-1"><a class="header-anchor" href="#_2、核心概念"><span>2、核心概念</span></a></h2><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p><p>docker客户端(Client)：连接docker主机进行操作；</p><p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p><p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p><p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p><p>使用Docker的步骤：</p><p>1）、安装Docker</p><p>2）、去Docker仓库找到这个软件对应的镜像；</p><p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p><p>4）、对容器的启动停止就是对软件的启动停止；</p><h2 id="_3、安装docker" tabindex="-1"><a class="header-anchor" href="#_3、安装docker"><span>3、安装docker</span></a></h2><h3 id="_3-2-安装" tabindex="-1"><a class="header-anchor" href="#_3-2-安装"><span>3.2 安装</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1、检查内核版本，必须是3.10及以上</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uname</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2、安装docker</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3、输入y确认安装</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4、启动docker</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# systemctl start docker</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# docker -v</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> version</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1.12.6,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 3e8e77d/1.12.6</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Docker version 26.1.4 build 5650f9b   —— 2024 年记录的版本</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5、开机启动docker</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# systemctl enable docker</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Created</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> symlink</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/systemd/system/multi-user.target.wants/docker.service</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/lib/systemd/system/docker.service.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6、停止docker</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stop</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Ubuntu</strong></p><p>安装命令如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>curl -x http://192.168.56.1:7890 -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><s>也可以使用国内 daocloud 一键安装命令：</s>（没用了）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>curl -sSL https://get.daocloud.io/docker | sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-2-docker换源" tabindex="-1"><a class="header-anchor" href="#_3-2-docker换源"><span>3.2 Docker换源</span></a></h3><p>默认docker源下载东西十分的慢，因此需要换源</p><p>1、首先修改<code>daemon.json</code> 文件</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]$ vi /etc/docker/daemon.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2、替换成以下内容</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;registry-mirrors&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://u6jsxuzl.mirror.aliyuncs.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、重启<code>docker</code></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">service</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> restart</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>演示如下</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]$ vi /etc/docker/daemon.json</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]$ cat /etc/docker/daemon.json</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;registry-mirrors&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://mj9kvemk.mirror.aliyuncs.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]$ service docker restart</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Redirecting</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /bin/systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> restart</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker.service</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>换其他源，配置如下</strong></p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;registry-mirrors&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;http://registry.docker-cn.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;http://docker.mirrors.ustc.edu.cn&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;http://hub-mirror.c.163.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;insecure-registries&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;registry.docker-cn.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;docker.mirrors.ustc.edu.cn&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ], </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;debug&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;experimental&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-docker-使用代理" tabindex="-1"><a class="header-anchor" href="#_3-3-docker-使用代理"><span>3.3 Docker 使用代理</span></a></h3><p><a href="https://docs.docker.com/config/daemon/proxy/#httphttps-proxy" target="_blank" rel="noopener noreferrer">https://docs.docker.com/config/daemon/proxy/#httphttps-proxy</a></p><p><strong>方法一</strong>，配置<code>daemon.json</code>文件：</p><p><strong>注意 json 文件不能有额外的逗号</strong></p><p><code>vi /etc/docker/daemon.json</code></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;proxies&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;http-proxy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://proxy.example.com:3128&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;https-proxy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://proxy.example.com:3129&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;no-proxy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;*.test.example.com,.example.org,127.0.0.0/8&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;proxies&quot;: {</span></span>
<span class="line"><span>    &quot;http-proxy&quot;: &quot;http://192.168.56.1:7890&quot;,</span></span>
<span class="line"><span>    &quot;https-proxy&quot;: &quot;http://192.168.56.1:7890&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重启docker</p><p><strong>方法二</strong></p><p>创建 dockerd 相关的 systemd 目录，这个目录下的配置将覆盖 dockerd 的默认配置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ sudo mkdir -p /etc/systemd/system/docker.service.d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>新建配置文件 <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code>，这个文件中将包含环境变量</p><div class="language-ini line-numbers-mode" data-highlighter="shiki" data-ext="ini" data-title="ini" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">[Service]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">Environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;HTTP_PROXY=http://proxy.example.com:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">Environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;HTTPS_PROXY=https://proxy.example.com:443&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你自己建了私有的镜像仓库，需要 dockerd 绕过代理服务器直连，那么配置 NO_PROXY 变量：</p><div class="language-ini line-numbers-mode" data-highlighter="shiki" data-ext="ini" data-title="ini" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">[Service]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">Environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;HTTP_PROXY=http://proxy.example.com:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">Environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;HTTPS_PROXY=https://proxy.example.com:443&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">Environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NO_PROXY=your-registry.com,10.10.10.10,*.example.com&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个 <code>NO_PROXY</code> 变量的值用逗号分隔，而且可以使用通配符（*），极端情况下，如果 <code>NO_PROXY=*</code>，那么所有请求都将不通过代理服务器。</p><p>重新加载配置文件，重启 dockerd</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" data-title="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ sudo systemctl daemon</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">reload</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ sudo systemctl restart docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>检查确认环境变量已经正确配置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ sudo systemctl show --property=Environment docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>从 docker info 的结果中查看配置项。</p><p>这样配置后，应该可以正常拉取 docker 镜像。</p><h2 id="_4、docker常用命令" tabindex="-1"><a class="header-anchor" href="#_4、docker常用命令"><span>4、Docker常用命令</span></a></h2><h3 id="_4-1-镜像相关操作" tabindex="-1"><a class="header-anchor" href="#_4-1-镜像相关操作"><span>4.1 镜像相关操作</span></a></h3><p><strong>1、检索</strong></p><p><code>docker search [keyword]</code></p><p><strong>2、拉取</strong></p><p><code>docker pull [镜像名]:[tag]</code></p><p><strong>3、查看本地镜像</strong></p><p><code>docker images</code></p><p><strong>4、删除本地镜像</strong></p><p><code>docker rmi image-[id]</code></p><p>Docker的相关镜像可以去<a href="https://hub.docker.com" target="_blank" rel="noopener noreferrer">网页</a>查看</p><p>常见的镜像操作命令如图：</p><figure><img src="`+g+'" alt="image-20210731155649535" tabindex="0" loading="lazy"><figcaption>image-20210731155649535</figcaption></figure><h3 id="_4-2-容器相关操作" tabindex="-1"><a class="header-anchor" href="#_4-2-容器相关操作"><span>4.2 容器相关操作</span></a></h3><p>容器操作的命令如图：</p><figure><img src="'+m+'" alt="image-20220119181219123" tabindex="0" loading="lazy"><figcaption>image-20220119181219123</figcaption></figure><p><strong>1、运行镜像</strong></p><p><code>docker run --name [container-name] -d [image-name]</code></p><p><code>--privileged</code>：启动容器的时候，把权限带进去</p><p><code>--name</code>：自定义容器名</p><p><code>-d</code>：后台运行</p><p><code>-i</code>：提供交互接口</p><p><code>-v</code>：配置文件和持久化存储的挂载，前面的是服务器的文件路径，后面的是容器的路径</p><p><code>-t</code>：提供一个 tty (伪终端)，与 -i 配合就可以通过 ssh 工具连接到 这个容器里面去了</p><p><code>image-name</code>：指定镜像模板</p><p><strong>2、查看运行中的容器</strong></p><p><code>docker ps</code></p><p><strong>3、停止运行中的容器</strong></p><p><code>docker stop [container-id|container-name]</code></p><p><strong>4、查看所有的容器</strong></p><p><code>docker ps -a</code></p><p><strong>5、删除容器</strong></p><p><code>docker rm [container-id|container-name]</code></p><p>注：容器必须是停止的</p><p><strong>6、端口映射</strong></p><p><code>-p [外部端口:内部端口]</code></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# docker run -d -p 8080:8080 tomcat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>7、查看容器日志</strong></p><p><code>docker logs [container-name|container-id] -f</code></p><p>跟踪持续查看</p><h3 id="_4-3-数据卷" tabindex="-1"><a class="header-anchor" href="#_4-3-数据卷"><span>4.3 数据卷</span></a></h3><p>**数据卷（volume）**是一个虚拟目录，指向宿主机文件系统中的某个目录。</p><figure><img src="'+u+'" alt="image-20210731173541846" tabindex="0" loading="lazy"><figcaption>image-20210731173541846</figcaption></figure><p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p><p>这样，我们操作宿主机的/var/lib/docker/volumes/html目录，就等于操作容器内的/usr/share/nginx/html目录了</p><p>数据卷操作的基本语法如下：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> volume</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [COMMAND]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p><ul><li>create 创建一个volume</li><li>inspect 显示一个或多个volume的信息</li><li>ls 列出所有的volume</li><li>prune 删除未使用的volume</li><li>rm 删除一个或多个指定的volume</li></ul><p><strong>创建和查看数据卷</strong></p><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置</p><p>① 创建数据卷</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> volume</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>② 查看所有数据</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> volume</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果：</p><figure><img src="'+A+'" alt="image-20210731173746910" tabindex="0" loading="lazy"><figcaption>image-20210731173746910</figcaption></figure><p>③ 查看数据卷详细信息卷</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> volume</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果：</p><figure><img src="'+y+`" alt="image-20210731173809877" tabindex="0" loading="lazy"><figcaption>image-20210731173809877</figcaption></figure><p>可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。</p><p><strong>小结</strong>：</p><p>数据卷的作用：</p><ul><li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li></ul><p>数据卷操作：</p><ul><li>docker volume create：创建数据卷</li><li>docker volume ls：查看所有数据卷</li><li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li><li>docker volume rm：删除指定数据卷</li><li>docker volume prune：删除所有未使用的数据卷</li></ul><p><strong>挂载数据卷</strong></p><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mn</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> html:/root/html</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8080:80</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  nginx</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的-v就是挂载数据卷的命令：</p><ul><li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的/root/html这个目录中</li></ul><h3 id="_4-4-其他操作" tabindex="-1"><a class="header-anchor" href="#_4-4-其他操作"><span>4.4 其他操作</span></a></h3><p><strong>1、查看防火墙状态</strong></p><p><code>service firewalld status</code></p><p><strong>2、临时关闭防火墙</strong></p><p><code>service firewalld stop</code></p><p><strong>3、以命令行的方式运行容器</strong></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [container-id|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">contain-name]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>4、复制</strong></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [OPTIONS] &lt;source_path&gt; &lt;container&gt;:&lt;destination_path&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [OPTIONS] &lt;container&gt;:&lt;source_path&gt; &lt;destination_path&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、创建容器" tabindex="-1"><a class="header-anchor" href="#_5、创建容器"><span>5、创建容器</span></a></h2><h3 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>MySQL</span></a></h3><p>一般来说数据库容器不需要建立目录映射</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 3306:3306</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  MYSQL_ROOT_PASSWORD=root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>–name：容器名，此处命名为<code>mysql</code></li><li>-e：配置信息，此处配置mysql的root用户的登陆密码</li><li>-p：端口映射，此处映射 主机3306端口 到 容器的3306端口</li><li>-d：后台运行容器，保证在退出终端后容器继续运行</li></ul><p>如果要建立目录映射</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">duso</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 3306:3306</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-v </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/usr/local/docker/mysql/conf:/etc/mysql</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-v </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/usr/local/docker/mysql/logs:/var/log/mysql</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-v </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/usr/local/docker/mysql/data:/var/lib/mysql</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-e </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">MYSQL_ROOT_PASSWORD=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">123456</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-d </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">mysql:5.7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>-v：主机和容器的目录映射关系，&quot;:&quot;前为主机目录，之后为容器目录</li></ul><h2 id="_6、高级网络" tabindex="-1"><a class="header-anchor" href="#_6、高级网络"><span>6、高级网络</span></a></h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h3><p>Docker服务默认会创建一个docker0网桥（其上有一个 docker0 内部接口），它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。</p><p>Docker默认指定了<code>docker0</code>接口的IP地址（172.17.0.1）和子网掩码（255.255.0.0），让主机和容器之间可以通过网桥相互通信，它还给出了<code>MTU</code>（接口允许接收的最大传输单元），通常是<code>1500 Bytes</code>，或宿主主机网络路由上支持的默认值。这些值都可以在服务启动的时候进行配置。</p><p><strong>注意</strong></p>`,156)),i("ol",null,[s[2]||(s[2]=i("li",null,[a("创建容器时将所有容器都连接到 docker0 网桥上，默认在 docker0 网桥的容器都可以使用容器 ip 地址进行通信。 "),i("ul",null,[i("li",null,[a("通过 "),i("code",null,"docker inspect [xxx]"),a("可以查看ip信息")])])],-1)),i("li",null,[s[1]||(s[1]=a("也可以使用容器的名称进行通信，但是")),h(n,{color:"red"},{default:d(()=>s[0]||(s[0]=[a("使用容器必须自定义网桥而不能使用默认的 docker0")])),_:1})])]),s[4]||(s[4]=e(`<h3 id="网桥" tabindex="-1"><a class="header-anchor" href="#网桥"><span>网桥</span></a></h3><p>1、查看网桥</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ docker network ls</span></span>
<span class="line"><span>NETWORK ID     NAME                      DRIVER    SCOPE</span></span>
<span class="line"><span>1dde88146ca8   bridge                    bridge    local</span></span>
<span class="line"><span>47b70c81e4f8   host                      host      local</span></span>
<span class="line"><span>63a96f5ed64b   none                      null      local</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认网桥：bridge、host、none</p><p>2、其他相关命令</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> network</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --help</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Usage:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> COMMAND</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Manage</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> networks</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Commands:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  connect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     Connect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> network</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      Create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> network</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  disconnect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Disconnect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> network</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     Display</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> detailed</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> information</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> one</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> or</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> more</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> networks</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  ls</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          List</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> networks</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  prune</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       Remove</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> all</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> unused</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> networks</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  rm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          Remove</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> one</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> or</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> more</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> networks</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、创建网桥</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker network create [-d bridge] (网络名称)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>4、在指定网络运行容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 启动时指定网络</span></span>
<span class="line"><span>docker run -d --network (network-name) ....</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 启动后加入网络</span></span>
<span class="line"><span>docker network connect (network-name) (container-name|container-id)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、排错指南" tabindex="-1"><a class="header-anchor" href="#_7、排错指南"><span>7、排错指南</span></a></h2><h3 id="_1-访问docker中的mysql出错" tabindex="-1"><a class="header-anchor" href="#_1-访问docker中的mysql出错"><span>（1）访问docker中的mysql出错</span></a></h3><figure><img src="`+v+`" alt="image-20200130145554064" tabindex="0" loading="lazy"><figcaption>image-20200130145554064</figcaption></figure><p>解决：</p><p>1、进入mysql容器命令行中</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# docker exec -it mysql bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2、登录</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mysql</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3、修改密码</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">alter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;root&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> identified</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql_native_password</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> by</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;root&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>实例演示如下</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# docker ps</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CONTAINER</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        IMAGE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">               COMMAND</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                  CREATED</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">             STATUS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">              PORTS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                               NAMES</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">70ac6f6a11fd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        mysql</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">               &quot;docker-entrypoint...&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   5</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> seconds</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ago</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       Up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> seconds</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        0.0.0.0:3306</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">3306/tcp,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 33060/tcp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   mysql</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# docker exec -it mysql bash</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root@70ac6f6a11fd:/#</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Enter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> password:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Welcome</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> monitor.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Commands</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> end</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">or</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Your</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connection</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> id</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> version:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8.0.19</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Community</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GPL</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Copyright</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Oracle</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> registered</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> trademark</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Oracle</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Corporation</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> and/or</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> its</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">affiliates.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Other</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> names</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> may</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> be</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> trademarks</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> their</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> respective</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">owners.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;help;&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> or</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;\\h&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> help.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;\\c&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clear</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> current</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> input</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> statement.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">alter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;root&#39;identified</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql_native_password</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> by</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;root&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Query</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> OK,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rows</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> affected</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (0.18 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">sec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-创建mysql容器报错" tabindex="-1"><a class="header-anchor" href="#_2-创建mysql容器报错"><span>（2）创建mysql容器报错</span></a></h3><p>通过docker创建的容器启动后总是非正常关闭</p><figure><img src="`+F+'" alt="image-20200208102836018" tabindex="0" loading="lazy"><figcaption>image-20200208102836018</figcaption></figure><p>查看错误日志，可以看出，他让我们指定关于密码的参数</p><figure><img src="'+b+'" alt="image-20200208102425311" tabindex="0" loading="lazy"><figcaption>image-20200208102425311</figcaption></figure><p>正确的创建容器方式，需要显示的指定密码</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@centos ~]# docker run --name mysql -d -p 3306:3306 -e  </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">MYSQL_ROOT_PASSWORD</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">root</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+C+`" alt="image-20200208103128938" tabindex="0" loading="lazy"><figcaption>image-20200208103128938</figcaption></figure><h3 id="_3-redis相关" tabindex="-1"><a class="header-anchor" href="#_3-redis相关"><span>（3）Redis相关</span></a></h3><p>1）挂在配置文件</p><p>需要添加<code>-v</code>参数</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local/redis/redis.conf:/etc/redis/redis.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）设置Redis密码</p><p>设置密码只需要加上–requirepass</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 6379:6379</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --requirepass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;mypassword&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_8、不适用-sudo-执行-docker" tabindex="-1"><a class="header-anchor" href="#_8、不适用-sudo-执行-docker"><span>8、不适用 sudo 执行 docker</span></a></h2><p>默认情况下，Docker需要管理员权限。</p><p>要以非root用户身份运行Docker命令而不添加<a href="https://www.myfreax.com/sudo-command-in-linux/" target="_blank" rel="noopener noreferrer"><code>sudo</code></a>，您需要将用户添加到<code>docker</code>组。该组是在Docker CE软件包安装期间创建的。</p><p><s>为此，请运行以下命令：</s>（没用）</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> usermod</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -aG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $USER</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><s><code>$USER</code>是保存您的用户名的环境变量，不用修改，它代表当前登录用户</s></p><p>或者</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sudo gpasswd -a $USER docker #将当前用户添加至docker用户组</span></span>
<span class="line"><span>newgrp docker #更新docker用户组</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、修改docker环境变量" tabindex="-1"><a class="header-anchor" href="#_9、修改docker环境变量"><span>9、修改docker环境变量</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看容器详情</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ContainID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 关闭docker</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stop</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果关不掉</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stop</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker.socket</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 修改容器的json文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /var/lib/docker/containers/27bdexxxx/config.v2.json</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动docker</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10、容器自动重启" tabindex="-1"><a class="header-anchor" href="#_10、容器自动重启"><span>10、容器自动重启</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --restart=no</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">always</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> techxuexi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_11、日志大小与清理" tabindex="-1"><a class="header-anchor" href="#_11、日志大小与清理"><span>11、日志大小与清理</span></a></h2><p><code>/opt/docker-sh/docker_log_size.sh</code> 查所有容器日志大小脚本</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;======== docker containers logs file size ========&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">logs</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /var/lib/docker/containers/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -name</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-json.log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> log</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $logs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        do</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">             ls</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -lh</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/opt/docker-sh/clean_docker_log.sh </code> 清空所有容器日志脚本</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/sh </span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;======== start clean docker containers logs ========&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">logs</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /var/lib/docker/containers/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -name</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-json.log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> log</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $logs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        do</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">                echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;clean logs : </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$log</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /dev/null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        done</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;======== end clean docker containers logs ========&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意添加执行权限 <code>chmod +x xxx</code></p><h2 id="_12、容器打包镜像" tabindex="-1"><a class="header-anchor" href="#_12、容器打包镜像"><span>12、容器打包镜像</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Usage:  docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Create a new image from a container&#39;s changes</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Aliases:</span></span>
<span class="line"><span>  docker container commit, docker commit</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Options:</span></span>
<span class="line"><span>  -a, --author string    Author (e.g., &quot;John Hannibal Smith</span></span>
<span class="line"><span>                         &lt;hannibal@a-team.com&gt;&quot;)</span></span>
<span class="line"><span>  -c, --change list      Apply Dockerfile instruction to the created image</span></span>
<span class="line"><span>  -m, --message string   Commit message</span></span>
<span class="line"><span>  -p, --pause            Pause container during commit (default true)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker commit -a=&quot;angus&quot; -m=&quot;angus&#39;s tomcat remove doc&quot; b2a3d7b67722  angustomcat:1.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你可以使用 Docker 的 <code>docker commit</code> 和 <code>docker build</code> 命令来解包镜像、修改内容并重新打包。以下是具体步骤：</p><ol><li><p><strong>解包镜像并运行容器</strong>： 首先，从镜像启动一个容器，将要修改的镜像解包到容器中。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run -it &lt;image_name&gt; /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，<code>&lt;image_name&gt;</code> 是你想要解包的镜像名。</p></li><li><p><strong>修改容器内容</strong>： 进入容器后，你可以对其内容进行修改，例如在某个文件中添加一行代码。举个例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>echo &#39;your_new_code_here&#39; &gt;&gt; /path/to/your_file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>提交更改并创建新的镜像</strong>： 修改完成后，退出容器并使用 <code>docker commit</code> 创建新的镜像。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker commit &lt;container_id&gt; &lt;new_image_name&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，<code>&lt;container_id&gt;</code> 是你运行的容器 ID，可以通过 <code>docker ps</code> 获取，<code>&lt;new_image_name&gt;</code> 是你给新镜像起的名字。</p></li><li><p><strong>重新打包（构建新镜像）</strong>： 你也可以将这些步骤写入一个 <code>Dockerfile</code>，然后使用 <code>docker build</code> 来重新打包镜像。</p><p>举个例子，先创建一个 <code>Dockerfile</code>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>FROM &lt;image_name&gt;</span></span>
<span class="line"><span>RUN echo &#39;your_new_code_here&#39; &gt;&gt; /path/to/your_file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用以下命令构建新镜像：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker build -t &lt;new_image_name&gt; .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><p>这样就能解包镜像、添加代码并重新打包。使用 <code>docker commit</code> 方法适合对运行中的容器进行快速修改，而 <code>Dockerfile</code> 方法更适合自动化和重复使用。</p><h2 id="_13、查看容器挂载的目录" tabindex="-1"><a class="header-anchor" href="#_13、查看容器挂载的目录"><span>13、查看容器挂载的目录</span></a></h2><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" data-title="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker inspect container_name | grep </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Mounts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">A</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>-A 20</code> 表示需要查看的行数</p>`,65))])}const D=l(B,[["render",f],["__file","Docker 笔记.html.vue"]]),q=JSON.parse('{"path":"/knowledge/%E5%AE%B9%E5%99%A8%E5%8C%96_%E7%BC%96%E6%8E%92/Docker/Docker%20%E7%AC%94%E8%AE%B0.html","title":"Docker 教程","lang":"zh-CN","frontmatter":{"description":"Docker 教程 1、简介 Docker是一个开源的应用容器引擎；是一个轻量级容器技术； Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像； 运行中的这个镜像称为容器，容器启动是非常快速的。 image-20200129184447695image-20200129184447695 ...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/knowledge/%E5%AE%B9%E5%99%A8%E5%8C%96_%E7%BC%96%E6%8E%92/Docker/Docker%20%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:title","content":"Docker 教程"}],["meta",{"property":"og:description","content":"Docker 教程 1、简介 Docker是一个开源的应用容器引擎；是一个轻量级容器技术； Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像； 运行中的这个镜像称为容器，容器启动是非常快速的。 image-20200129184447695image-20200129184447695 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-12T14:50:48.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-12T14:50:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 教程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-12T14:50:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[{"level":2,"title":"1、简介","slug":"_1、简介","link":"#_1、简介","children":[]},{"level":2,"title":"2、核心概念","slug":"_2、核心概念","link":"#_2、核心概念","children":[]},{"level":2,"title":"3、安装docker","slug":"_3、安装docker","link":"#_3、安装docker","children":[{"level":3,"title":"3.2 安装","slug":"_3-2-安装","link":"#_3-2-安装","children":[]},{"level":3,"title":"3.2 Docker换源","slug":"_3-2-docker换源","link":"#_3-2-docker换源","children":[]},{"level":3,"title":"3.3 Docker 使用代理","slug":"_3-3-docker-使用代理","link":"#_3-3-docker-使用代理","children":[]}]},{"level":2,"title":"4、Docker常用命令","slug":"_4、docker常用命令","link":"#_4、docker常用命令","children":[{"level":3,"title":"4.1 镜像相关操作","slug":"_4-1-镜像相关操作","link":"#_4-1-镜像相关操作","children":[]},{"level":3,"title":"4.2 容器相关操作","slug":"_4-2-容器相关操作","link":"#_4-2-容器相关操作","children":[]},{"level":3,"title":"4.3 数据卷","slug":"_4-3-数据卷","link":"#_4-3-数据卷","children":[]},{"level":3,"title":"4.4 其他操作","slug":"_4-4-其他操作","link":"#_4-4-其他操作","children":[]}]},{"level":2,"title":"5、创建容器","slug":"_5、创建容器","link":"#_5、创建容器","children":[{"level":3,"title":"MySQL","slug":"mysql","link":"#mysql","children":[]}]},{"level":2,"title":"6、高级网络","slug":"_6、高级网络","link":"#_6、高级网络","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"网桥","slug":"网桥","link":"#网桥","children":[]}]},{"level":2,"title":"7、排错指南","slug":"_7、排错指南","link":"#_7、排错指南","children":[{"level":3,"title":"（1）访问docker中的mysql出错","slug":"_1-访问docker中的mysql出错","link":"#_1-访问docker中的mysql出错","children":[]},{"level":3,"title":"（2）创建mysql容器报错","slug":"_2-创建mysql容器报错","link":"#_2-创建mysql容器报错","children":[]},{"level":3,"title":"（3）Redis相关","slug":"_3-redis相关","link":"#_3-redis相关","children":[]}]},{"level":2,"title":"8、不适用 sudo 执行 docker","slug":"_8、不适用-sudo-执行-docker","link":"#_8、不适用-sudo-执行-docker","children":[]},{"level":2,"title":"9、修改docker环境变量","slug":"_9、修改docker环境变量","link":"#_9、修改docker环境变量","children":[]},{"level":2,"title":"10、容器自动重启","slug":"_10、容器自动重启","link":"#_10、容器自动重启","children":[]},{"level":2,"title":"11、日志大小与清理","slug":"_11、日志大小与清理","link":"#_11、日志大小与清理","children":[]},{"level":2,"title":"12、容器打包镜像","slug":"_12、容器打包镜像","link":"#_12、容器打包镜像","children":[]},{"level":2,"title":"13、查看容器挂载的目录","slug":"_13、查看容器挂载的目录","link":"#_13、查看容器挂载的目录","children":[]}],"git":{"createdTime":1741791048000,"updatedTime":1741791048000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":1,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":11.12,"words":3336},"filePathRelative":"knowledge/容器化&编排/Docker/Docker 笔记.md","localizedDate":"2025年3月12日","excerpt":"\\n<h2>1、简介</h2>\\n<p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p>\\n<p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p>\\n<p>运行中的这个镜像称为容器，容器启动是非常快速的。</p>\\n<figure><figcaption>image-20200129184447695</figcaption></figure>\\n<figure><figcaption>image-20200129184525893</figcaption></figure>\\n","autoDesc":true}');export{D as comp,q as data};
