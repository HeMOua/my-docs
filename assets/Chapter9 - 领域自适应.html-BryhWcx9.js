import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as T,a as Q,b as a,e,o}from"./app-DJ-_Fn1E.js";const r="/assets/image-20211210150837778-M1HN-Myc.png",i={},l={class:"MathJax",jax:"SVG",style:{position:"relative"}},s={style:{"vertical-align":"-0.986ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.275ex",height:"2.581ex",role:"img",focusable:"false",viewBox:"0 -705 3657.6 1140.7","aria-hidden":"true"};function m(p,t){return o(),T("div",null,[t[4]||(t[4]=Q('<h1 id="领域自适应" tabindex="-1"><a class="header-anchor" href="#领域自适应"><span>领域自适应</span></a></h1><blockquote><p>Domain Adaptation：在某个Domain训练的模型，可以在另一个Domain测试成功</p></blockquote><p>Domain shift：训练和测试数据有不同的分布，比如手写数字，如果测试集的背景有所改变的话，测试的结果可能会大幅度下降</p><p>我们定义Source为原数据，Target为分布不同的测试数据</p><h2 id="basic-idea" tabindex="-1"><a class="header-anchor" href="#basic-idea"><span>Basic Idea</span></a></h2><p>首先我们知道source和target的分布是不同的，比如手写数字，虽然能看到数字，但是背景颜色不一样</p><p>接着我们需要构造一个特征提取器（Feature Extractor - network），它可以提取图片的特征，我们最终希望从source和target提取出的feature之间的分布差异越小越好，甚至是同一个分布</p><p>一个分类器我们可以把他看成是一个特征提取器和一个标签预测器构成，也就是我们希望将source和target数据投入到特征提取器后得到的向量分布是一样的</p><p>怎样能让不同数据源提取出的向量分布看不来差异呢？这里需要新引入一个Domain Classifier，他就是一个二元分类器，它可以吃入一个向量（提取出的特征向量）然后辨别这个向量是来自source还是来自target。</p><p>而Feature extractor的作用就是学习去欺骗过domain classifier，有点像GAN。但是还是有不同的，因为对于Feature extractor来说，它的优势太大了，如果Feature Extractor不管看到什么输入他都输出0向量，那么Domain Classifier根本辨别不出这个特征向量来自哪个数据源。</p><p>为了避免上述的情况，那么Label Predictor的作用就体现出来了，它对Feature Extractor做了一定的限制，因此上述情况不会发生</p><figure><img src="'+r+'" alt="image-20211210150837778" tabindex="0" loading="lazy"><figcaption>image-20211210150837778</figcaption></figure>',12)),a("p",null,[t[2]||(t[2]=e("注意")),a("mjx-container",l,[(o(),T("svg",s,t[0]||(t[0]=[Q('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(502,363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(502,-290.8) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g><g data-mml-node="mo" transform="translate(940.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(1385.6,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(502,363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(502,-247) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(2293.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(2737.9,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(502,363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(502,-283) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></g>',1)]))),t[1]||(t[1]=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("msubsup",null,[a("mi",null,"θ"),a("mi",null,"f"),a("mo",null,"∗")]),a("mo",null,","),a("msubsup",null,[a("mi",null,"θ"),a("mi",null,"p"),a("mo",null,"∗")]),a("mo",null,","),a("msubsup",null,[a("mi",null,"θ"),a("mi",null,"d"),a("mo",null,"∗")])])],-1))]),t[3]||(t[3]=e("的意义"))]),t[5]||(t[5]=a("p",null,"当然还有其他办法",-1)),t[6]||(t[6]=a("ul",null,[a("li",null,[e("Decisioin Boundary "),a("ul",null,[a("li",null,"DIRT-T —— 1802.08735"),a("li",null,"Maximum Classifier Discrepancy —— 1712.02560")])])],-1)),t[7]||(t[7]=a("p",null,"若source和target本身包括的数据集就存在交集，以及交集之外的数据，比如source没有老虎这个标签，而target有，那么硬贴标签就有点不妥了 —— Universal domain adaptaion 有所介绍",-1))])}const c=n(i,[["render",m],["__file","Chapter9 - 领域自适应.html.vue"]]),g=JSON.parse('{"path":"/knowledge/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Chapter9%20-%20%E9%A2%86%E5%9F%9F%E8%87%AA%E9%80%82%E5%BA%94.html","title":"领域自适应","lang":"zh-CN","frontmatter":{"description":"领域自适应 Domain Adaptation：在某个Domain训练的模型，可以在另一个Domain测试成功 Domain shift：训练和测试数据有不同的分布，比如手写数字，如果测试集的背景有所改变的话，测试的结果可能会大幅度下降 我们定义Source为原数据，Target为分布不同的测试数据 Basic Idea 首先我们知道source和ta...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/knowledge/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Chapter9%20-%20%E9%A2%86%E5%9F%9F%E8%87%AA%E9%80%82%E5%BA%94.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:title","content":"领域自适应"}],["meta",{"property":"og:description","content":"领域自适应 Domain Adaptation：在某个Domain训练的模型，可以在另一个Domain测试成功 Domain shift：训练和测试数据有不同的分布，比如手写数字，如果测试集的背景有所改变的话，测试的结果可能会大幅度下降 我们定义Source为原数据，Target为分布不同的测试数据 Basic Idea 首先我们知道source和ta..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-17T14:21:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-17T14:21:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"领域自适应\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-17T14:21:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[{"level":2,"title":"Basic Idea","slug":"basic-idea","link":"#basic-idea","children":[]}],"git":{"createdTime":1739802080000,"updatedTime":1739802080000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":1,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":1.85,"words":555},"filePathRelative":"knowledge/人工智能/李宏毅深度学习/Chapter9 - 领域自适应.md","localizedDate":"2025年2月17日","excerpt":"\\n<blockquote>\\n<p>Domain Adaptation：在某个Domain训练的模型，可以在另一个Domain测试成功</p>\\n</blockquote>\\n<p>Domain shift：训练和测试数据有不同的分布，比如手写数字，如果测试集的背景有所改变的话，测试的结果可能会大幅度下降</p>\\n<p>我们定义Source为原数据，Target为分布不同的测试数据</p>\\n<h2>Basic Idea</h2>\\n<p>首先我们知道source和target的分布是不同的，比如手写数字，虽然能看到数字，但是背景颜色不一样</p>\\n<p>接着我们需要构造一个特征提取器（Feature Extractor - network），它可以提取图片的特征，我们最终希望从source和target提取出的feature之间的分布差异越小越好，甚至是同一个分布</p>","autoDesc":true}');export{c as comp,g as data};
