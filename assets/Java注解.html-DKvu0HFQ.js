import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-y10xhlsH.js";const l={};function t(h,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="java-注解" tabindex="-1"><a class="header-anchor" href="#java-注解"><span>Java 注解</span></a></h1><p>Java注解是一种在Java程序中提供元数据（metadata）的方式。它们可以用来为代码添加信息，但并不会改变程序的实际逻辑。注解可以应用在类、方法、变量、参数等各种元素上，允许我们在编译时、运行时或者在部署时对程序进行额外的处理。</p><p>以下是与Java注解相关的一些重要知识点：</p><ol><li><p><strong>注解的定义</strong>：</p><p>注解的定义使用<code>@interface</code>关键字，类似于接口的定义。例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> MyAnnotation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 注解中可以包含成员变量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>内建注解</strong>：</p><p>Java中包含了一些内建的注解，如：</p><ul><li><code>@Override</code>：用于标识一个方法覆盖了父类的方法。</li><li><code>@Deprecated</code>：标识一个类、方法或者字段已经过时，不建议使用。</li><li><code>@SuppressWarnings</code>：抑制编译器产生警告信息。</li></ul></li><li><p><strong>元注解</strong>：</p><p>元注解是用于定义注解的注解。Java中的元注解包括：</p><ul><li><code>@Target</code>：定义了注解可以应用的地方，如方法、类、字段等。</li><li><code>@Retention</code>：定义了注解的生命周期，可以是<code>SOURCE</code>（只在源代码中可见）、<code>CLASS</code>（在编译时可见）、<code>RUNTIME</code>（在运行时可见）。</li><li><code>@Documented</code>：用于指示注解应该被包含在Java文档中。</li><li><code>@Inherited</code>：用于指示子类是否应该继承父类的注解。</li></ul></li><li><p><strong>使用注解</strong>：</p><p>可以在需要使用注解的地方使用<code>@</code>符号，后面跟着注解的名称。例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">MyAnnotation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;example&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>访问注解</strong>：</p><p>可以使用反射机制来访问注解，例如获取注解的成员变量值等。</p></li><li><p><strong>自定义注解</strong>：</p><p>可以使用<code>@interface</code>来自定义注解。自定义注解可以包含成员变量，但成员变量的类型必须是基本类型、<code>String</code>、<code>Enum</code>、<code>Class</code>、注解或者这些类型的数组。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> MyAnnotation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 设置默认值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用默认值</strong>：</p><p>可以为注解的成员变量指定默认值。如果在使用注解时没有指定某个成员变量的值，就会使用默认值。</p></li><li><p><strong>处理注解</strong>：</p><p>注解的处理可以通过反射实现。可以编写程序来读取并处理注解，以实现自定义的逻辑。</p></li><li><p><strong>使用场景</strong>：</p><ul><li><strong>代码分析</strong>：可以通过注解来标记一些特殊的情况，然后通过工具来分析代码。</li><li><strong>依赖注入</strong>：如Spring框架中通过注解来配置Bean。</li><li><strong>单元测试</strong>：JUnit等单元测试框架中使用注解标记测试方法。</li></ul></li><li><p><strong>限制和注意事项</strong>：</p><ul><li>注解不能影响程序的实际逻辑，它们只提供附加信息。</li><li>注解处理器在编译时或运行时进行处理，可能会增加一些额外的开销。</li><li>注解的使用应当符合相应的语义，避免滥用。</li></ul></li></ol><p>总的来说，Java注解是一种非常有用的元数据工具，可以用于在代码中提供额外的信息，从而使得程序的行为更加灵活和可配置。</p>`,5)]))}const r=s(l,[["render",t],["__file","Java注解.html.vue"]]),k=JSON.parse('{"path":"/knowledge/Java/JavaSE/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/Java%E6%B3%A8%E8%A7%A3.html","title":"Java 注解","lang":"zh-CN","frontmatter":{"description":"Java 注解 Java注解是一种在Java程序中提供元数据（metadata）的方式。它们可以用来为代码添加信息，但并不会改变程序的实际逻辑。注解可以应用在类、方法、变量、参数等各种元素上，允许我们在编译时、运行时或者在部署时对程序进行额外的处理。 以下是与Java注解相关的一些重要知识点： 注解的定义： 注解的定义使用@interface关键字，类...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/knowledge/Java/JavaSE/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/Java%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:title","content":"Java 注解"}],["meta",{"property":"og:description","content":"Java 注解 Java注解是一种在Java程序中提供元数据（metadata）的方式。它们可以用来为代码添加信息，但并不会改变程序的实际逻辑。注解可以应用在类、方法、变量、参数等各种元素上，允许我们在编译时、运行时或者在部署时对程序进行额外的处理。 以下是与Java注解相关的一些重要知识点： 注解的定义： 注解的定义使用@interface关键字，类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-17T14:21:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-17T14:21:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 注解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-17T14:21:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1739802080000,"updatedTime":1739802080000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":1,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":2.61,"words":783},"filePathRelative":"knowledge/Java/JavaSE/Java基础语法/Java注解.md","localizedDate":"2025年2月17日","excerpt":"\\n<p>Java注解是一种在Java程序中提供元数据（metadata）的方式。它们可以用来为代码添加信息，但并不会改变程序的实际逻辑。注解可以应用在类、方法、变量、参数等各种元素上，允许我们在编译时、运行时或者在部署时对程序进行额外的处理。</p>\\n<p>以下是与Java注解相关的一些重要知识点：</p>\\n<ol>\\n<li>\\n<p><strong>注解的定义</strong>：</p>\\n<p>注解的定义使用<code>@interface</code>关键字，类似于接口的定义。例如：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">interface</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\"> MyAnnotation</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">    String</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> value</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">()</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // 注解中可以包含成员变量</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>内建注解</strong>：</p>\\n<p>Java中包含了一些内建的注解，如：</p>\\n<ul>\\n<li><code>@Override</code>：用于标识一个方法覆盖了父类的方法。</li>\\n<li><code>@Deprecated</code>：标识一个类、方法或者字段已经过时，不建议使用。</li>\\n<li><code>@SuppressWarnings</code>：抑制编译器产生警告信息。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>元注解</strong>：</p>\\n<p>元注解是用于定义注解的注解。Java中的元注解包括：</p>\\n<ul>\\n<li><code>@Target</code>：定义了注解可以应用的地方，如方法、类、字段等。</li>\\n<li><code>@Retention</code>：定义了注解的生命周期，可以是<code>SOURCE</code>（只在源代码中可见）、<code>CLASS</code>（在编译时可见）、<code>RUNTIME</code>（在运行时可见）。</li>\\n<li><code>@Documented</code>：用于指示注解应该被包含在Java文档中。</li>\\n<li><code>@Inherited</code>：用于指示子类是否应该继承父类的注解。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>使用注解</strong>：</p>\\n<p>可以在需要使用注解的地方使用<code>@</code>符号，后面跟着注解的名称。例如：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">MyAnnotation</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">value</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> \\"example\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">public</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> class</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> MyClass</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    // ...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>访问注解</strong>：</p>\\n<p>可以使用反射机制来访问注解，例如获取注解的成员变量值等。</p>\\n</li>\\n<li>\\n<p><strong>自定义注解</strong>：</p>\\n<p>可以使用<code>@interface</code>来自定义注解。自定义注解可以包含成员变量，但成员变量的类型必须是基本类型、<code>String</code>、<code>Enum</code>、<code>Class</code>、注解或者这些类型的数组。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">interface</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\"> MyAnnotation</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">    String</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> value</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">()</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    int</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> count</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">() </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">default</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // 设置默认值</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>使用默认值</strong>：</p>\\n<p>可以为注解的成员变量指定默认值。如果在使用注解时没有指定某个成员变量的值，就会使用默认值。</p>\\n</li>\\n<li>\\n<p><strong>处理注解</strong>：</p>\\n<p>注解的处理可以通过反射实现。可以编写程序来读取并处理注解，以实现自定义的逻辑。</p>\\n</li>\\n<li>\\n<p><strong>使用场景</strong>：</p>\\n<ul>\\n<li><strong>代码分析</strong>：可以通过注解来标记一些特殊的情况，然后通过工具来分析代码。</li>\\n<li><strong>依赖注入</strong>：如Spring框架中通过注解来配置Bean。</li>\\n<li><strong>单元测试</strong>：JUnit等单元测试框架中使用注解标记测试方法。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>限制和注意事项</strong>：</p>\\n<ul>\\n<li>注解不能影响程序的实际逻辑，它们只提供附加信息。</li>\\n<li>注解处理器在编译时或运行时进行处理，可能会增加一些额外的开销。</li>\\n<li>注解的使用应当符合相应的语义，避免滥用。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{r as comp,k as data};
