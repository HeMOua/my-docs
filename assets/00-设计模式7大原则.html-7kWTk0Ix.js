import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as l,o as t}from"./app-Dxo9_7Ek.js";const a="/assets/image-20210201113432692-C4OwqMjV.png",n="/assets/image-20210201113918925-B30bn3O8.png",r="/assets/image-20210201115423260-DYA3m-6q.png",o={};function s(c,e){return t(),p("div",null,e[0]||(e[0]=[l('<h1 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式"><span>设计模式</span></a></h1><ul><li>设计模式的目的</li></ul><p>编写软件过程中，程序员面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性等多方面的挑战，设计模式是为了让程序（软件），具有更好</p><p>1）代码重用性（即：相同功能的代码，不用多次编写）</p><p>2）可读性（即：编程规范性，便于其他程序员的阅读和理解）</p><p>3）可扩展性（即：当需要增加新的功能时，非常的方便，称为可维护）</p><p>4）可靠性（即：当我们增加新的功能后，对原来的功能没有影响）</p><p>5）使程序呈现高内聚，低耦合的特性</p><ul><li>分享金句</li></ul><ol><li>设计模式包含了面向对象的精髓，“懂了设计模式，你就懂了面向对象分析和设计（OOA/D）的精要”</li><li>Scott Mayers 在其巨著《Effective C++》就曾经说过：C++老手和C++新手的区别就是前者手背上有很多伤疤</li></ol><p>设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础（即：设计模式为什么这样设计的依据）</p><h1 id="设计模式7大原则" tabindex="-1"><a class="header-anchor" href="#设计模式7大原则"><span>设计模式7大原则</span></a></h1><h2 id="单一职责原则" tabindex="-1"><a class="header-anchor" href="#单一职责原则"><span>单一职责原则</span></a></h2><p><strong>基本介绍</strong></p><p>1、降低类的复杂度，一个类只负责一项职责。</p><p>2、提高类的可读性，可维护性</p><p>3、降低变更引起的风险</p><p>4、通常情况下瓦我们应当遵守单一职责原则</p><ul><li>只有逻辑足够简单，才可以在代码级违反单一职责原则</li><li>只有类中方法数量足够少，可以在方法级别保持单一职责原则</li></ul><h2 id="接口隔离原则" tabindex="-1"><a class="header-anchor" href="#接口隔离原则"><span>接口隔离原则</span></a></h2><p>Interface Segregation Principle</p><p><strong>基本介绍</strong></p><ol><li>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖该建立在最小的接口上</li></ol><figure><img src="'+a+'" alt="image-20210201113432692" tabindex="0" loading="lazy"><figcaption>image-20210201113432692</figcaption></figure><ol start="2"><li><p>类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，如果接口 Interface1 对于类 A 和类 C<br> 来说不是最小接口，那么类 B 和类 D 必须去实现他们不需要的方法。</p></li><li><p>按隔离原则应当这样处理：<br> 将接口 Interface1 拆分为独立的几个接口(这里我们拆分成 3 个接口)，类 A 和类 C 分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则</p></li></ol><p><strong>应传统方法的问题和使用接口隔离原则改进</strong></p><ol><li><p>类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，如果接口 Interface1 对于类 A 和类 C<br> 来说不是最小接口，那么类 B 和类 D 必须去实现他们不需要的方法</p></li><li><p>将接口 Interface1 拆分为独立的几个接口，类 A 和类 C 分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则</p></li><li><p>接口 Interface1 中出现的方法，根据实际情况拆分为三个接口</p></li></ol><figure><img src="'+n+'" alt="image-20210201113918925" tabindex="0" loading="lazy"><figcaption>image-20210201113918925</figcaption></figure><h2 id="依赖倒转原则" tabindex="-1"><a class="header-anchor" href="#依赖倒转原则"><span>依赖倒转原则</span></a></h2><p>Dependence Inversion Principle</p><p><strong>基本介绍</strong></p><p>依赖倒转原则是指：</p><ol><li><p>高层模块不应该依赖低层模块，二者都应该依赖其抽象</p></li><li><p>抽象不应该依赖细节，细节应该依赖抽象</p></li><li><p>依赖倒转(倒置)的中心思想是面向接口编程</p></li><li><p>依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在 java 中，抽象指的是接口或抽象类，细节就是具体的实现类</p></li><li><p>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成</p></li></ol><h2 id="里氏替换原则" tabindex="-1"><a class="header-anchor" href="#里氏替换原则"><span>里氏替换原则</span></a></h2><p>Liskov Substitution Principle</p><p><strong>OO 中的继承性的思考和说明</strong></p><ol><li><p>继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。</p></li><li><p>继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低， 增加对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障</p></li><li><p>问题提出：在编程中，如何正确的使用继承? =&gt; 里氏替换原则</p></li></ol><p><strong>基本介绍</strong></p><ol><li><p>里氏替换原则(Liskov Substitution Principle)在 1988 年，由麻省理工学院的以为姓里的女士提出的。</p></li><li><p>如果对每个类型为 T1 的对象 o1，都有类型为 T2 的对象 o2，使得以 T1 定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。</p></li><li><p>在使用继承时，遵循里氏替换原则，在<mark>子类中尽量不要重写父类的方法</mark></p></li><li><p>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖 来解决问题。</p></li></ol><p><strong>解决方法</strong></p><ol><li><p>我们发现原来运行正常的相减功能发生了错误。原因就是类 B 无意中重写了父类的方法，造成原有功能出现错误。在实际编程中，我们常常会通过重写父类的方法完成新的功能，这样写起来虽然简单，但整个继承体系的复用性会比较差。特别是运行多态比较频繁的时候</p></li><li><p>通用的做法是：<mark>原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉</mark>，采用依赖，聚合，组合等关系代替.</p></li><li><p>改进方案</p></li></ol><figure><img src="'+r+'" alt="image-20210201115423260" tabindex="0" loading="lazy"><figcaption>image-20210201115423260</figcaption></figure><h2 id="开闭原则" tabindex="-1"><a class="header-anchor" href="#开闭原则"><span>开闭原则</span></a></h2><p>Open Closed Principle</p><p><strong>基本介绍</strong></p><ol><li><p>开闭原则是编程中最基础、最重要的设计原则</p></li><li><p>一个软件实体如类，模块和函数应该对扩展开放(对提供方)，对修改关闭(对使用方)。用抽象构建框架，用实现扩展细节。</p></li><li><p>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</p></li><li><p>编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则。</p></li></ol><h2 id="迪米特法则" tabindex="-1"><a class="header-anchor" href="#迪米特法则"><span>迪米特法则</span></a></h2><p>Demeter Principle</p><p><strong>基本介绍</strong></p><ol><li><p>一个对象应该对其他对象保持最少的了解</p></li><li><p>类与类关系越密切，耦合度越大</p></li><li><p>迪米特法则又叫最少知道原则，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息</p></li><li><p>迪米特法则还有个更简单的定义：只与直接的朋友通信</p></li><li><p>直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</p></li></ol><p><strong>迪米特法则注意事项和细节</strong></p><ol><li><p>迪米特法则的核心是<mark>降低</mark>类之间的耦合</p></li><li><p>但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间(对象间)耦合关系， 并<mark>不是要求完全没有依赖关系</mark></p></li></ol><h2 id="合成复用原则" tabindex="-1"><a class="header-anchor" href="#合成复用原则"><span>合成复用原则</span></a></h2><p>Composite Reuse Principle</p><p><strong>基本介绍</strong></p><p>原则是尽量使用合成/聚合的方式，而不是使用继承</p><h1 id="设计原则核心思想" tabindex="-1"><a class="header-anchor" href="#设计原则核心思想"><span>设计原则核心思想</span></a></h1><ol><li><p>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</p></li><li><p>针对接口编程，而不是针对实现编程。</p></li><li><p>为了交互对象之间的松耦合设计而努力</p></li></ol>',58)]))}const d=i(o,[["render",s],["__file","00-设计模式7大原则.html.vue"]]),m=JSON.parse('{"path":"/knowledge/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/00-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7%E5%A4%A7%E5%8E%9F%E5%88%99.html","title":"设计模式","lang":"zh-CN","frontmatter":{"order":1,"description":"设计模式 设计模式的目的 编写软件过程中，程序员面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性等多方面的挑战，设计模式是为了让程序（软件），具有更好 1）代码重用性（即：相同功能的代码，不用多次编写） 2）可读性（即：编程规范性，便于其他程序员的阅读和理解） 3）可扩展性（即：当需要增加新的功能时，非常的方便，称为可维护） 4）可靠性（...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/knowledge/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/00-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7%E5%A4%A7%E5%8E%9F%E5%88%99.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"设计模式 设计模式的目的 编写软件过程中，程序员面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性等多方面的挑战，设计模式是为了让程序（软件），具有更好 1）代码重用性（即：相同功能的代码，不用多次编写） 2）可读性（即：编程规范性，便于其他程序员的阅读和理解） 3）可扩展性（即：当需要增加新的功能时，非常的方便，称为可维护） 4）可靠性（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-17T14:21:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-17T14:21:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-17T14:21:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[{"level":2,"title":"单一职责原则","slug":"单一职责原则","link":"#单一职责原则","children":[]},{"level":2,"title":"接口隔离原则","slug":"接口隔离原则","link":"#接口隔离原则","children":[]},{"level":2,"title":"依赖倒转原则","slug":"依赖倒转原则","link":"#依赖倒转原则","children":[]},{"level":2,"title":"里氏替换原则","slug":"里氏替换原则","link":"#里氏替换原则","children":[]},{"level":2,"title":"开闭原则","slug":"开闭原则","link":"#开闭原则","children":[]},{"level":2,"title":"迪米特法则","slug":"迪米特法则","link":"#迪米特法则","children":[]},{"level":2,"title":"合成复用原则","slug":"合成复用原则","link":"#合成复用原则","children":[]}],"git":{"createdTime":1739802080000,"updatedTime":1739802080000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":1,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":7.58,"words":2273},"filePathRelative":"knowledge/设计模式/00-设计模式7大原则.md","localizedDate":"2025年2月17日","excerpt":"\\n<ul>\\n<li>设计模式的目的</li>\\n</ul>\\n<p>编写软件过程中，程序员面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性等多方面的挑战，设计模式是为了让程序（软件），具有更好</p>\\n<p>1）代码重用性（即：相同功能的代码，不用多次编写）</p>\\n<p>2）可读性（即：编程规范性，便于其他程序员的阅读和理解）</p>\\n<p>3）可扩展性（即：当需要增加新的功能时，非常的方便，称为可维护）</p>\\n<p>4）可靠性（即：当我们增加新的功能后，对原来的功能没有影响）</p>\\n<p>5）使程序呈现高内聚，低耦合的特性</p>\\n<ul>\\n<li>分享金句</li>\\n</ul>","autoDesc":true}');export{d as comp,m as data};
