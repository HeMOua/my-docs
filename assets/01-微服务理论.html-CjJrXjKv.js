import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as n,o as t}from"./app-BQR2Y89h.js";const l="/assets/image-20220214155244304-DQZMUlTa.png",o="/assets/image-20220214155349852-CuRho5f2.png",r="/assets/image-20220113150634146-BVsFj_o2.png",a="/assets/image-20220113150742803-DuOPmfp4.png",s="/assets/image-20220113164757825-C4vCHrl9.png",g="/assets/image-20220113165051099-DChwIJXZ.png",c="/assets/image-20220114130059463-DTyqk9FD.png",u="/assets/image-20210718102122986-CdTWHUb8.png",d="/assets/image-20220114141526895-DCkLRAn9.png",h={};function m(f,i){return t(),p("div",null,i[0]||(i[0]=[n('<h1 id="微服务理论" tabindex="-1"><a class="header-anchor" href="#微服务理论"><span>微服务理论</span></a></h1><h2 id="发展演变" tabindex="-1"><a class="header-anchor" href="#发展演变"><span>发展演变</span></a></h2><p><strong>单体架构</strong>（单一应用架构）</p><blockquote><p>当网站流量很小时，只需一个应用，将<strong>所有功能都部署在一起</strong>，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><p>简单来说就是将业务的所有功能集中在一个项目中开发，达成一个包部署。</p></blockquote><p>优点：</p><ul><li>部署简单易用</li><li>部署成本低</li></ul><p>缺点：</p><ul><li>耦合度高</li><li>性能扩展比较难</li><li>协同开发问题</li><li>不利于升级维护</li></ul><p><strong>垂直应用架构</strong></p><blockquote><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将<strong>应用拆成互不相干的几个项目</strong>，形成多个独立的单体架构，以提升效率。（此时，用于加速前端页面开发的Web框架(MVC)是关键）</p></blockquote><p>通过切分业务来实现各个模块独立部署，有以下特点</p><p>优点：</p><ul><li>降低了维护和部署的难度</li><li>团队各司其职更易管理</li><li>性能扩展也更方便，更有针对性。</li></ul><p>缺点：</p><ul><li>公用模块无法重复利用，开发性的浪费</li></ul><p><strong>分布式架构</strong></p><blockquote><p>《分布式系统原理与范型》定义：“<strong>分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统</strong>”</p><p>分布式架构是指在垂直架构的基础上，<strong>将公共业务模块抽取出来，作为独立的服务</strong>，供其他调用者消费，以实现服务的共享和重用。</p><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</p><ul><li>RPC： Remote Procedure Call 远程过程调用。有非常多的协议和技术来都实现了RPC的过程。比如：HTTP REST风格，Java RMI规范、WebService SOAP协议、Hession等等。</li></ul></blockquote><figure><img src="'+l+'" alt="image-20220214155244304" tabindex="0" loading="lazy"><figcaption>image-20220214155244304</figcaption></figure><p>1、优点：</p><ul><li>降低服务耦合</li><li>有利于服务升级拓展</li></ul><p>2、缺点：</p><ul><li>服务提供方一旦产生变更，所有消费方都需要变更</li></ul><p>3、分布式架构要考虑的问题：</p><ul><li>服务拆分力度如何？</li><li>服务集群地址如何维护？</li><li>服务之间如何实现远程调用？</li><li>服务健康状态如何感知？</li></ul><p>为了解决上述问题，出现了许多技术，比如ESB、Hession、Dubbo、Spring Cloud等等，但是目前最流行火热的方案称之为微服务</p><p><strong>流动计算架构</strong></p><blockquote><p>SOA：（Service-Oriented Architecture，面向服务的架构）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和契约联系起来。</p><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心是关键</strong>。</p></blockquote><figure><img src="'+o+'" alt="image-20220214155349852" tabindex="0" loading="lazy"><figcaption>image-20220214155349852</figcaption></figure><p>ESB：(Enterparise Servce Bus) 企业服务总线，服务中介。主要是提供了一个服务于服务之间的交互。ESB 包含的功能如：负载均衡，流量控制，加密处理，服务的监控，异常处理，监控告急等等。</p><p>Dubbo 是 SOA时代的产物</p><p><strong>微服务架构</strong></p><blockquote><p>微服务架构是在 SOA 上做的升华，微服务架构强调的一个重点是“业务需要<strong>彻底的组件化和服务化</strong>”，原有的单个业务系统会拆分为多个可以独立开发、设计、运行的小应用。这些小应用之间通过服务完成交互和集成。</p><p><strong>微服务架构 = 80%的SOA服务架构思想 + 100%的组件化架构思想 + 80%的领域建模思想</strong></p></blockquote><p>微服务是一种经过良好架构设计的<strong>分布式架构方案</strong>，它具有以下特征：</p><p>特点（解释一）：</p><ul><li><p>服务实现组件化：开发者可以自由选择开发技术。也不需要协调其他团队</p></li><li><p>服务之间交互一般使用REST API</p></li><li><p>去中心化：每个微服务有自己私有的数据库持久化业务数据</p></li><li><p>自动化部署：把应用拆分成为一个一个独立的单个服务，方便自动化部署、测试、运维</p></li></ul><p>特征（解释二）：</p><ul><li>单一职责：微服务拆分力度更小，每一个服务都对应唯一的业务能力，能做到单一职责，避免重复业务开发</li><li>面向服务：微服务对外暴露业务接口</li><li>自治：团队独立、技术独立、数据独立、部署独立</li><li>隔离性强：服务调用做好隔离、容错、降级、避免出现级联问题</li></ul><p>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相协作（通常是基于HTTP协议的RESTful API)。每个服务都围绕着具体业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。另外，应当尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。</p><p>SpringCloud 是微服务时代的产物</p><h2 id="相关组件" tabindex="-1"><a class="header-anchor" href="#相关组件"><span>相关组件</span></a></h2><p><strong>基于分布式的微服务架构，满足那些维度，支撑起这些维度的具体技术？</strong></p><p>服务注册与发现、服务调用、服务熔断、负载均衡、服务降级、服务消息队列、配置中心管理、服务网关、服务监控、全链路追踪、自动化构建部署、服务定时任务调度操作</p><figure><img src="'+r+'" alt="image-20220113150634146" tabindex="0" loading="lazy"><figcaption>image-20220113150634146</figcaption></figure><p><strong>1、注册中心</strong></p><p>传统的单体架构，所有的业务功能全部写在一起，随着业务越来越多，代码耦合的也就越来越严重，将来的升级维护就会变的非常困难</p><p>所以大型的公司就会对业务进行拆分，将不同的业务拆成多个独立的项目，每一个项目将完成一部分业务功能，将来独立开发和部署，我们将这个单独的业务称之为服务，到项目越来越大服务就会变得越多，其中的服务相互间的调用关系就会变得越来越复杂</p><p>以往需要调用其他服务时，我们要知道它的ip端口等信息，十分的麻烦，这时我们就可以通过注册中心来<strong>拉取和注册服务信息</strong></p><p><strong>2、配置中心</strong></p><p>不用的服务有不同的配置，为了方便统一管理，我们需要一个配置中心，它可以拉取配置信息，也能对配置进行热更新</p><p><strong>3、服务网关</strong></p><p>限制能访问服务的内容，可以<strong>请求路由</strong>，进行<strong>负载均衡</strong></p><p><strong>4、分布式缓存</strong></p><p>当用户非常多时，数据库集群肯定无法抗住非常大的高并发，这时就需要缓存了，它存储部分数据库内容在内存中，速度比数据库会快很多，当查询数据时先查缓存，未命中再去查找数据库</p><p><strong>5、分布式搜索</strong></p><p>进行普通的搜索利用缓存就能实现，但是进行海量数据的复杂搜索或者统计与分析就不能直接使用缓存了，这就要用到分布式搜索</p><p><mark>数据库将来的功能主要就是进行写操作，或者事务类型对数据安全性较高的操作</mark></p><p><strong>6、消息队列</strong></p><p>一般情况下访问一个数据先进行请求，然后再依次调用A、B、C服务，这时一整个操作链就会变得很长，导致响应时间较长，这时我们可以使用异步服务，比如A不再是调用B服务了，而是通知B服务要进行什么操作，然后结束自己的这次执行任务，这样异步操作就会大大提高效率</p><p><strong>7、分布式日志服务</strong></p><p>对整个系统的日志进行统一管理与查看</p><p><strong>8、系统监控链路追踪</strong></p><p>监控整个系统中各节点的运行状态</p><p><strong>9、自动部署</strong></p><figure><img src="'+a+'" alt="image-20220113150742803" tabindex="0" loading="lazy"><figcaption>image-20220113150742803</figcaption></figure><p>服务再将来可能达到成千上万的地步，所以通过人工进行部署服务不太现实，这时Jenkins就可以进行自动化部署，然后再经过docker打包形成镜像，或者kubernetes、rancher进行自动化部署</p><p>最后橙色框住的流程称为持续集成</p><h2 id="微服务技术栈" tabindex="-1"><a class="header-anchor" href="#微服务技术栈"><span>微服务技术栈</span></a></h2><figure><img src="'+s+'" alt="image-20220113164757825" tabindex="0" loading="lazy"><figcaption>image-20220113164757825</figcaption></figure><p>spring cloud涵盖了微服务治理大部分内容</p><figure><img src="'+g+'" alt="image-20220113165051099" tabindex="0" loading="lazy"><figcaption>image-20220113165051099</figcaption></figure><h2 id="微服务实现" tabindex="-1"><a class="header-anchor" href="#微服务实现"><span>微服务实现</span></a></h2><p>微服务这种方案需要技术框架来落地，全球的互联网公司都在积极尝试自己的微服务落地技术。</p><p>在国内最知名的就是SpringCloud和阿里巴巴的Dubbo。</p><p>不同对微服务的实现都有一定的差异，以下是他们之间的对比</p><figure><img src="'+c+'" alt="image-20220114130059463" tabindex="0" loading="lazy"><figcaption>image-20220114130059463</figcaption></figure><p>Nacos能兼容Feign以及它自己的Dubbo</p><h2 id="服务拆分以远程调用" tabindex="-1"><a class="header-anchor" href="#服务拆分以远程调用"><span>服务拆分以远程调用</span></a></h2><h3 id="拆分注意事项" tabindex="-1"><a class="header-anchor" href="#拆分注意事项"><span>拆分注意事项</span></a></h3><ul><li>不同微服务，不要重复开发相同业务</li><li>微服务数据独立，不要访问其它微服务的数据库</li><li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li></ul><h3 id="远程调用方式" tabindex="-1"><a class="header-anchor" href="#远程调用方式"><span>远程调用方式</span></a></h3><p>通过使用Java代码发送HTTP请求，步骤如下：</p><p>1）注册<code>RestTemplate</code></p><p>2）使用resttemplate的<code>getForObject</code>方法来获取接口数据</p><p>或者其他专门的远程调用组件Feign</p><h2 id="spring-cloud" tabindex="-1"><a class="header-anchor" href="#spring-cloud"><span>Spring Cloud</span></a></h2><p><strong>简介</strong></p><p>Spring Cloud是分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶。</p><ul><li>Spring cloud是目前国内使用最广泛的微服务框架</li><li>Spring Cloud集成了各种微服务功能组件，并基于Spring Boot实现了这些组件的自动装配，从而提供了良好的开箱即用体验</li></ul><p><strong>Spring Cloud技术栈</strong></p><p>服务注册与发现 —— Eureka</p><p>服务负载与调用 —— Netflix oss ribbon、Netflix feign</p><p>服务熔断降级 —— Hystrix</p><p>服务网关 —— Netflix oos zuul</p><p>服务分布式配置 —— spring cloud config</p><p>服务开发 —— spring boot</p><p><strong>组件的停更以及替换</strong></p><figure><img src="'+u+'" alt="image-20210718102122986" tabindex="0" loading="lazy"><figcaption>image-20210718102122986</figcaption></figure><h2 id="版本选型" tabindex="-1"><a class="header-anchor" href="#版本选型"><span>版本选型</span></a></h2><p>spring boot 2.x 搭配 spring could H版，具体搭配参考官网<a href="https://spring.io/projects/spring-cloud#overview" target="_blank" rel="noopener noreferrer">Spring Cloud</a>或者版本对应<a href="https://start.spring.io/actuator/info" target="_blank" rel="noopener noreferrer">json</a>文件</p><blockquote><p><strong>Spring Cloud的版本关系</strong></p><p>Spring Cloud 采用了英国伦敦地铁站的名称来命名，并<strong>由地铁站名称字母A-Z</strong>依次类推的形式来发布迭代版本</p><p>Spring Cloud是一个由许多子项目组成的综合项目，各子项目有不同的发布节奏。为了管理Spring Cloud与各子项目的版本依赖关系，发布了一个清单，其中包括了某个Spring Cloud版本对应的子项目版本。</p><p>为了避免Spring Cloud版本号与子项目版本号混淆，Spring Cloud版本采用了名称而非版本号的命名，这些版本的名字采用了伦敦地铁站的名字，根据字母表的顺序来对应版本时间顺序。</p><p>例如Angel是第一个版本, Brixton是第二个版本。当Spring Cloud的发布内容积累到临界点或者一个重大BUG被解决后，会发布一个 service releases 版本，简称SRx版本，比如Greenwich.SR2就是Spring Cloud发布的Greenwich版本的第2个SRX版本。</p></blockquote><figure><img src="'+d+'" alt="image-20220114141526895" tabindex="0" loading="lazy"><figcaption>image-20220114141526895</figcaption></figure><p>版本确定如下</p><ul><li>cloud —— Hoxton.SR1</li><li>boot —— 2.2.2.RELEASE</li><li>cloud alibaba —— 2.1.0.RELEASE</li><li>Java —— Java8</li><li>Maven ———— 3.5及以上</li><li>Mysql —— 5.7及以上</li></ul>',103)]))}const _=e(h,[["render",m],["__file","01-微服务理论.html.vue"]]),k=JSON.parse('{"path":"/knowledge/Java/JavaEE/SpringCloud/01-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%90%86%E8%AE%BA.html","title":"微服务理论","lang":"zh-CN","frontmatter":{"description":"微服务理论 发展演变 单体架构（单一应用架构） 当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。 简单来说就是将业务的所有功能集中在一个项目中开发，达成一个包部署。 优点： 部署简单易用 部署成本低 缺点： 耦合度高 性能扩展比较难 协同开发问题 不利于升级维护 ...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/knowledge/Java/JavaEE/SpringCloud/01-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%90%86%E8%AE%BA.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:title","content":"微服务理论"}],["meta",{"property":"og:description","content":"微服务理论 发展演变 单体架构（单一应用架构） 当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。 简单来说就是将业务的所有功能集中在一个项目中开发，达成一个包部署。 优点： 部署简单易用 部署成本低 缺点： 耦合度高 性能扩展比较难 协同开发问题 不利于升级维护 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-17T14:21:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-17T14:21:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"微服务理论\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-17T14:21:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[{"level":2,"title":"发展演变","slug":"发展演变","link":"#发展演变","children":[]},{"level":2,"title":"相关组件","slug":"相关组件","link":"#相关组件","children":[]},{"level":2,"title":"微服务技术栈","slug":"微服务技术栈","link":"#微服务技术栈","children":[]},{"level":2,"title":"微服务实现","slug":"微服务实现","link":"#微服务实现","children":[]},{"level":2,"title":"服务拆分以远程调用","slug":"服务拆分以远程调用","link":"#服务拆分以远程调用","children":[{"level":3,"title":"拆分注意事项","slug":"拆分注意事项","link":"#拆分注意事项","children":[]},{"level":3,"title":"远程调用方式","slug":"远程调用方式","link":"#远程调用方式","children":[]}]},{"level":2,"title":"Spring Cloud","slug":"spring-cloud","link":"#spring-cloud","children":[]},{"level":2,"title":"版本选型","slug":"版本选型","link":"#版本选型","children":[]}],"git":{"createdTime":1739802080000,"updatedTime":1739802080000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":1,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":10.31,"words":3093},"filePathRelative":"knowledge/Java/JavaEE/SpringCloud/01-微服务理论.md","localizedDate":"2025年2月17日","excerpt":"\\n<h2>发展演变</h2>\\n<p><strong>单体架构</strong>（单一应用架构）</p>\\n<blockquote>\\n<p>当网站流量很小时，只需一个应用，将<strong>所有功能都部署在一起</strong>，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p>\\n<p>简单来说就是将业务的所有功能集中在一个项目中开发，达成一个包部署。</p>\\n</blockquote>\\n<p>优点：</p>\\n<ul>\\n<li>部署简单易用</li>\\n<li>部署成本低</li>\\n</ul>\\n<p>缺点：</p>\\n<ul>\\n<li>耦合度高</li>\\n<li>性能扩展比较难</li>\\n<li>协同开发问题</li>\\n<li>不利于升级维护</li>\\n</ul>","autoDesc":true}');export{_ as comp,k as data};
