import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a,o as n}from"./app-DOkRBtKU.js";const l={};function t(d,e){return n(),i("div",null,e[0]||(e[0]=[a(`<h1 id="poetry教程" tabindex="-1"><a class="header-anchor" href="#poetry教程"><span>Poetry教程</span></a></h1><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><p>poetry 是一个命令行工具，安装之后就可以使用 poetry 指令。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> poetry</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>安装之后就会在 python 解释器的安装目录下的 <code>Scripts</code> 目录里面出现 <code>poetry.exe</code>，因为在安装 python 解释器是配置过环境变量，然后就可以直接全局使用了。</p><h2 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令"><span>常用指令</span></a></h2><ul><li><code>poetry init</code>：初始化项目</li><li><code>poetry env use</code>：创建虚拟环境</li><li><code>poetry install</code>：安装依赖</li><li><code>poetry add</code>：添加并安装依赖</li><li><code>poetry remove</code>：移除并删除依赖</li><li><code>poetry update</code>：更新可更新的依赖</li><li><code>poetry lock</code>：用于手动修改 pyproject.toml 后，同步更新 poetry.lock 文件</li><li><code>poetry export</code></li><li><code>poetry shell</code></li><li><code>poetry show</code></li></ul><h2 id="使用教程" tabindex="-1"><a class="header-anchor" href="#使用教程"><span>使用教程</span></a></h2><h3 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目"><span>初始化项目</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">X:\\</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> poetry-demo</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">X:\\</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> poetry-demo</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">X:\\poetry-demo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后会跳出来一连串的互动对话，用于创建项目的配置文件，这里我就直接全部一路回车，然后看一下生成的 <code>pyproject.toml</code> 配置文件：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;poetry-demo&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">description</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">authors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;zhengxinonly &lt;pyxxponly@gmail.com&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">readme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;README.md&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">packages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">include</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;poetry_demo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">python</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^3.10&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build-system</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">requires</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;poetry-core&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">build-backend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;poetry.core.masonry.api&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时项目的目录接口如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>poetry-demo</span></span>
<span class="line"><span>└── pyproject.toml</span></span>
<span class="line"><span></span></span>
<span class="line"><span>0 directories, 1 file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="虚拟环境" tabindex="-1"><a class="header-anchor" href="#虚拟环境"><span>虚拟环境</span></a></h3><p>poetry 预设了很多自己的虚拟环境配置，这些配置可以通过 <code>poetry config</code> 进行修改。</p><p>Windows 系统下 poetry 预设是将虚拟环境创建在 <code>C:\\Users\\&lt;用户名&gt;\\AppData\\Local\\pypoetry\\Cache\\virtualenvs</code> 目录下，当用户在执行 <code>poetry add</code> 等指令时，poetry 都会自动检查当下是否正在使用虚拟环境：</p><ul><li>如果是，则会直接安装模块到当前的虚拟环境下</li><li>如果否，则会自动帮你创建一个新的虚拟环境，然后再安装模块</li></ul><h4 id="创建虚拟环境-默认位置" tabindex="-1"><a class="header-anchor" href="#创建虚拟环境-默认位置"><span><em>创建虚拟环境(默认位置)</em></span></a></h4><p>使用指令 <code>poetry env use python</code>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>X:\\poetry-demo&gt;poetry env use python</span></span>
<span class="line"><span>Creating virtualenv poetry-demo-Ut74gzEx-py3.10 in C:\\Users\\xxp\\AppData\\Local\\pypoetry\\Cache\\virtualenvs</span></span>
<span class="line"><span>Using virtualenv: C:\\Users\\xxp\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\poetry-demo-Ut74gzEx-py3.10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出 poetry 为创建创建一个名为 <code>poetry-demo-Ut74gzEx-py3.10</code> 的虚拟环境</p><ul><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>poetry env use python</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>是使用当前命令行下激活的 python 解释器创建虚拟环境</p><ul><li>也可以将指令最后的 <code>python</code> ，改为 <code>python3</code>、<code>python3.8</code>，之类的，甚至只要需要 <code>3.8</code>，只要确保对于的解释器能够在环境变量中找到。</li><li>更多的配置可以查看 <a href="https://python-poetry.org/docs/managing-environments/" target="_blank" rel="noopener noreferrer">官方文档</a></li></ul></li><li><p>poetry 默认会将虚拟环境统一放在指定目录，例如刚刚创建的项目就放在 <code>C:\\Users\\xxp\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\</code> 目录当中</p></li><li><p>虚拟环境的命名模式为 <code>项目名-随机数-python版本</code></p></li></ul><h4 id="创建虚拟环境-当前位置" tabindex="-1"><a class="header-anchor" href="#创建虚拟环境-当前位置"><span><em>创建虚拟环境(当前位置)</em></span></a></h4><p>我们可以使用 <code>poetry config --list</code> 指令来查看 poetry 的几个主要设定，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>X:\\poetry-demo&gt;poetry config --list</span></span>
<span class="line"><span>cache-dir = &quot;C:\\\\Users\\\\xxp\\\\AppData\\\\Local\\\\pypoetry\\\\Cache&quot;</span></span>
<span class="line"><span>experimental.new-installer = true</span></span>
<span class="line"><span>experimental.system-git-client = false</span></span>
<span class="line"><span>installer.max-workers = null</span></span>
<span class="line"><span>installer.modern-installation = true</span></span>
<span class="line"><span>installer.no-binary = null</span></span>
<span class="line"><span>installer.parallel = true</span></span>
<span class="line"><span>virtualenvs.create = true</span></span>
<span class="line"><span>virtualenvs.in-project = null</span></span>
<span class="line"><span>virtualenvs.options.always-copy = false</span></span>
<span class="line"><span>virtualenvs.options.no-pip = false</span></span>
<span class="line"><span>virtualenvs.options.no-setuptools = false</span></span>
<span class="line"><span>virtualenvs.options.system-site-packages = false</span></span>
<span class="line"><span>virtualenvs.path = &quot;C:\\\\Users\\\\xxp\\\\AppData\\\\Local\\\\pypoetry\\\\Cache\\\\virtualenvs&quot;</span></span>
<span class="line"><span>virtualenvs.prefer-active-python = false</span></span>
<span class="line"><span>virtualenvs.prompt = &quot;{project_name}-py{python_version}&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>virtualenvs.create = true</code> 若改为 <code>false</code>，则可以停止 poetry 在检查不到虚拟环境是自动创建的行为模式，但是建议不要改动。</p><p>而 <code>virtualenvs.in-project = false</code> 就是我们要修改的目标，使用指令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> virtualenvs.in-project</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>先把之前创建的虚拟环境删除</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>X:\\poetry-demo&gt;poetry env remove python</span></span>
<span class="line"><span>Deleted virtualenv: C:\\Users\\xxp\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\poetry-demo-Ut74gzEx-py3.10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>重新创建虚拟环境，看一下差异：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>X:\\poetry-demo&gt;poetry env use python</span></span>
<span class="line"><span>Creating virtualenv poetry-demo in X:\\poetry-demo\\.venv</span></span>
<span class="line"><span>Using virtualenv: X:\\poetry-demo\\.venv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出：</p><ul><li>虚拟环境的路径改为项目的根目录下了</li><li>名称固定位 <code>.venv</code></li></ul><h4 id="启动与退出虚拟环境" tabindex="-1"><a class="header-anchor" href="#启动与退出虚拟环境"><span><em>启动与退出虚拟环境</em></span></a></h4><p>在项目的根目录下使用 <code>poetry shell</code> 就可以进入到虚拟环境</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>X:\\poetry-demo&gt;poetry shell</span></span>
<span class="line"><span>Spawning shell within X:\\poetry-demo\\.venv</span></span>
<span class="line"><span></span></span>
<span class="line"><span>(poetry-demo-py3.10) X:\\poetry-demo&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>poetry shell 指令会检查当前目录或上层目录是否存在 <code>pyproject，toml</code> 来确定需要启动的虚拟环境，所以如果不移动到项目的目录下，则会出现错误。</p><p>退出虚拟环境就更简单了，只要输入 <code>exit</code> 就可以了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(poetry-demo-py3.10) X:\\poetry-demo&gt;exit</span></span>
<span class="line"><span></span></span>
<span class="line"><span>X:\\poetry-demo&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指令" tabindex="-1"><a class="header-anchor" href="#指令"><span>指令</span></a></h3><h4 id="add-安装模块" tabindex="-1"><a class="header-anchor" href="#add-安装模块"><span><em>[add] 安装模块</em></span></a></h4><p>使用指令</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>相较于 <code>pip install</code>，我们试试安装 flask 看看会有什么样的变化</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(poetry-demo-py3.10) X:\\poetry-demo&gt;poetry add flask</span></span>
<span class="line"><span>Using version ^2.3.2 for flask</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Updating dependencies</span></span>
<span class="line"><span>Resolving dependencies...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Writing lock file</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Package operations: 8 installs, 0 updates, 0 removals</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  • Installing colorama (0.4.6)</span></span>
<span class="line"><span>  • Installing markupsafe (2.1.3)</span></span>
<span class="line"><span>  • Installing blinker (1.6.2)</span></span>
<span class="line"><span>  • Installing click (8.1.6)</span></span>
<span class="line"><span>  • Installing itsdangerous (2.1.2)</span></span>
<span class="line"><span>  • Installing jinja2 (3.1.2)</span></span>
<span class="line"><span>  • Installing werkzeug (2.3.6)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 poetry 会将所有的信息全部列出来，并且清楚的告知了新增了那些第三方模块。</p><p>此时项目中的 <code>pyproject.toml</code> 也发生了变化</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[tool.poetry.dependencies]</span></span>
<span class="line"><span>python = &quot;^3.10&quot;</span></span>
<span class="line"><span>flask = &quot;^2.3.2&quot;  # 新增部分</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里要说明，安装 flask ，则 <code>pyproject.toml</code> 只会新增 <code>flask = &quot;^2.3.2&quot;</code> 这个字段的第三方模块，其余依赖不会出现在 <code>toml</code> 文件中。</p><p>这里是一个非常大的优点，以便区分那些是用户安装的第三方模块，那些是第三方模块一并安装的依赖。</p><h4 id="add-依赖更新顺序" tabindex="-1"><a class="header-anchor" href="#add-依赖更新顺序"><span><em>[add] 依赖更新顺序</em></span></a></h4><p>通过 <code>poetry add</code> 添加依赖后，除了更新 <code>pyproject.toml</code> ，此时项目中还会新增一个文件，名为 <code>poetry.lock</code> ，它实际上就相当于 <code>pip</code> 的 <code>requirements.txt</code> ，详细记录了所有安装的模块与版本。</p><p>当使用 <code>poetry add</code> 指令时，<code>poetry</code> 会自动依序帮你做完这三件事：</p><ol><li>更新 <code>pyproject.toml</code>。</li><li>依照 <code>pyproject.toml</code> 的内容，更新 <code>poetry.lock</code> 。</li><li>依照 <code>poetry.lock</code> 的内容，更新虚拟环境。</li></ol><p>由此可见， <code>poetry.lock</code> 的内容是取决于 <code>pyproject.toml</code> ，但两者并不会自己连动，一定要基于特定指令才会进行同步与更新， <code>poetry add</code> 就是一个典型案例。</p><p>此时项目目录结构如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>poetry-demo</span></span>
<span class="line"><span>├── poetry.lock</span></span>
<span class="line"><span>└── pyproject.toml</span></span>
<span class="line"><span></span></span>
<span class="line"><span>0 directories, 2 files</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lock-更新-lock-文件" tabindex="-1"><a class="header-anchor" href="#lock-更新-lock-文件"><span><em>[lock] 更新 lock 文件</em></span></a></h4><p>当自行修改了 <code>pyproject.toml</code> 内容，比如变更特定模块的版本（这是有可能的，尤其在手动处理版本冲突的时候），此时 <code>poetry.lock</code> 的内容与 <code>pyproject.toml</code> 出现了脱钩，必须让它依照新的 <code>pyproject.toml</code> 内容更新、同步，使用指令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>poetry lock</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如此一来，才能确保手动修改的内容，也更新到 <code>poetry.lock</code> 中，毕竟虚拟环境如果要重新建立，是基于 <code>poetry.lock</code> 的内容来安装模块，而非 <code>pyproject.toml</code> 。</p><p>还是那句话：</p><blockquote><p>poetry.lock 相当于 Poetry 的 requirements.txt 。</p></blockquote><p>但要特别注意的是， <code>poetry lock</code> 指令，仅会更新 <code>poetry.lock</code> ，不会同时安装模块至虚拟环境</p><p>因此，在执行完 <code>poetry lock</code> 指令后，必须再使用 <code>poetry install</code> 来安装模块。否则就会出现 <code>poetry.lock</code> 和虚拟环境不一致的状况。</p><p>更多 <code>poetry lock</code> 细节可参考 官方文件，其中特别值得注意的是 <code>--no-update</code> 参数。</p><h4 id="add-dev-开发依赖" tabindex="-1"><a class="header-anchor" href="#add-dev-开发依赖"><span><em>[add] dev 开发依赖</em></span></a></h4><p>有些模块，比如 <code>pytest</code> 、 <code>black</code> 等等，只会在开发环境中使用，产品的部署环境并不需要。</p><p>Poetry 允许你区分这两者，将上述的模块安装至 <code>dev-dependencies</code> 区块，方便让你轻松建立一份「不包含」 <code>dev-dependencies</code> 开发模块的安装清单。</p><p>在此以 Black 为例，安装方式如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>poetry add black --group dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果的区别显示在 <code>pyproject.toml</code> 里：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[tool.poetry.dependencies]</span></span>
<span class="line"><span>python = &quot;^3.10&quot;</span></span>
<span class="line"><span>flask = &quot;^2.3.2&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>[tool.poetry.group.dev.dependencies]</span></span>
<span class="line"><span>black = &quot;^23.7.0&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 <code>black</code> 被列在不同区块： <code>tool.poetry.dev-dependencies</code></p><p>强烈建议善用 dev-dependencies</p><p>善用 <code>--group dev</code> 参数，明确区分开发环境，我认为非常必要。</p><p>首先，这些模块常常属于「检测型」工具，相关的依赖模块着实不少！比如 <code>flake8</code> ，它依赖了 <code>pycodestyle</code> 、 <code>pyflakes</code> 、 <code>mccabe</code> 等等，还有 <code>black</code> 、 <code>pre-commit</code> ，依赖模块数量也都很可观。</p><h4 id="update-更新依赖" tabindex="-1"><a class="header-anchor" href="#update-更新依赖"><span><em>[update] 更新依赖</em></span></a></h4><p>这个就很简单了，使用 <code>poetry update</code> 指令即可：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>poetry update</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面指令会更新全部可能可以更新的模块，也可以仅指定特定模块，比如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>poetry update requests toml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>关于 <code>poetry update</code> 的其余参数，请参考<a href="https://python-poetry.org/docs/cli/#update" target="_blank" rel="noopener noreferrer">文件</a>。</p><p>还一件重要的事，那就是关于模块版本的升级限制规则，取决于你在 <code>pyproject.toml</code> 中的设定。</p><h4 id="show-列出当前依赖" tabindex="-1"><a class="header-anchor" href="#show-列出当前依赖"><span><em>[show]列出当前依赖</em></span></a></h4><p>类似 <code>pip list</code> ，这里要使用 <code>poetry show</code></p><p>特别提醒的是，这里的清单内容并不是来自于虚拟环境，这点和 pip 不同，而是来自于 <code>poetry.lock</code> 的内容。</p><p>你可能会想，来自于 <code>poetry.lock</code> 或虚拟环境，有差吗？两者不是应该要一致？</p><p>没错，理论上是，但也有不一致的时候，比如你使用了 <code>pip install</code> 指令安装模块，就不会记载在 <code>poetry.lock</code> 中，那 <code>poetry show</code> 自然也不会显示。</p><p><strong>树状显示模块依赖层级</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>poetry show --tree</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>让主要模块与其依赖模块的关系与层次，一目了然。</p><p>而且很贴心的是，它也可以只显示指定模块的依赖层级，以 <code>celery</code> 为例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>poetry show celery --tree</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="remove-移除依赖" tabindex="-1"><a class="header-anchor" href="#remove-移除依赖"><span><em>[remove] 移除依赖</em></span></a></h4><p>使用 <code>poetry remove</code> 指令。和 <code>poetry add</code> 一样，可以加上 <code>-D</code> 参数来移除置于开发区的模块。</p><p>而移除模块时的依赖解析能力，正是 Poetry 远优于 pip 的主要环节，因为 pip 没有嘛！也是我提议改用 Poetry 的关键理由——为了顺利移除模块与依赖。</p><p>前面已经提过，pip 的 <code>pip uninstall</code> 只会移除你所指定的模块，而不会连同依赖模块一起移除。</p><p>这是基于安全考量，因为 pip 没有依赖解析功能。如果贸然移除所有安装时一并安装的依赖模块，可能会造成巨大灾难，让别的模块失去效用。</p><p>所以，使用 pip 时，我们鲜少会去移除已经不再使用的模块。毕竟依赖关系错综复杂，移除模块可能造成许多副作用，实在是太麻烦了。</p><h4 id="export-导出依赖" tabindex="-1"><a class="header-anchor" href="#export-导出依赖"><span><em>[export] 导出依赖</em></span></a></h4><p>理论上，全面改用 Poetry 后，项目中是不需要存在 <code>requirements.txt</code> ，因为它的角色已经完全被 <code>poetry.lock</code> 所取代。</p><p>但事实是，你可能还是需要它，甚至希望它随着 <code>poetry.lock</code> 的内容更新！至少对我而言就是如此，我在 Docker 部署环境中并不使用 Poetry，所以我需要一份完全等价于 <code>poetry.lock</code> 的 <code>requirements.txt</code> ，用于 Docker 部署。</p><p>你可能想说，那我就在 Poetry 的虚拟环境下，使用以往熟悉的指令 <code>pip freeze &gt; requirements.txt</code> 来产生一份就可以了吧？我本来也是这么想，但实际的产出却是如此：（提醒：目前 poetry-demo 专案中仅剩下 Black 和它的依赖模块）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>black @ file:///Users/kyo/Library/Caches/pypoetry/artifacts/11/4c/fc/cd6d885e9f5be135b161e365b11312cff5920d7574c8446833d7a9b1a3/black-22.3.0-cp38-cp38-macosx_10_9_x86_64.whl</span></span>
<span class="line"><span>click @ file:///Users/kyo/Library/Caches/pypoetry/artifacts/f0/23/09/b13d61d1fa8b3cd7c26f67505638d55002e7105849de4c4432c28e1c0d/click-8.1.2-py3-none-any.whl</span></span>
<span class="line"><span>mypy-extensions @ file:///Users/kyo/Library/Caches/pypoetry/artifacts/b6/a0/b0/a5dc9acd6fd12aba308634f21bb7cf0571448f20848797d7ecb327aa12/mypy_extensions-0.4.3-py2.py3-none-any.whl</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这呈现好像不是我们以前熟悉的那样：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>black==22.3.0</span></span>
<span class="line"><span>click==8.1.2</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没错，只要是使用 <code>poetry add</code> 安装的模块，在 <code>pip freeze</code> 就会变成这样。此时想输出类似 <code>requirements.txt</code> 的格式，需要使用 <code>poetry export</code> 。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>poetry export -f requirements.txt -o requirements.txt --without-hashes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们再看一下输出结果，虽然不尽相同，但也相去不远了……吗？等等，怎么是空白？</p><p><strong>导出 dev 依赖</strong></p><p>因为 <code>poetry export</code> 预设只会输出 <code>toml</code> 中的 <code>[tool.poetry.dependencies]</code> 区块的模块！还记得上面我们把 Black 安装到 <code>[tool.poetry.dev-dependencies]</code> 了吗？</p><p>这倒是没错，不过基于演示需求，我们必须输出 <code>[tool.poetry.dev-dependencies]</code> 的模块，才能看到 Black。</p><p>加上 <code>--dev</code> 参数即可：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>poetry export -f requirements.txt -o requirements.txt --without-hashes --dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出的 <code>requirements.txt</code> 内容：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>black==22.3.0; python_full_version &gt;= &quot;3.6.2&quot;</span></span>
<span class="line"><span>click==8.1.2; python_version &gt;= &quot;3.7&quot; and python_full_version &gt;= &quot;3.6.2&quot;</span></span>
<span class="line"><span>colorama==0.4.4; python_version &gt;= &quot;3.7&quot; and python_full_version &gt;= &quot;3.6.2&quot; and platform_system == &quot;Windows&quot;</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然长得有点不一样，但这个档案确实是可以 <code>pip install</code> 的。</p><p>从这里也可以看出先前一再提及区分开发、部署依赖的价值——大部分时候我们并不需要输出开发用模块。</p><p><code>poetry export</code> 所有参数用法与说明，请参考 <a href="https://python-poetry.org/docs/cli/#export" target="_blank" rel="noopener noreferrer">文件</a>。</p><h3 id="清除缓存" tabindex="-1"><a class="header-anchor" href="#清除缓存"><span>清除缓存</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poetry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cache</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clear</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --all</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="修改-poetry-镜像源" tabindex="-1"><a class="header-anchor" href="#修改-poetry-镜像源"><span>修改 poetry 镜像源</span></a></h3><p>修改为清华镜像源</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>poetry source add tsinghua https://pypi.tuna.tsinghua.edu.cn/simple</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,127)]))}const o=s(l,[["render",t],["__file","Poetry教程.html.vue"]]),c=JSON.parse('{"path":"/knowledge/Python/Poetry/Poetry%E6%95%99%E7%A8%8B.html","title":"Poetry教程","lang":"zh-CN","frontmatter":{"description":"Poetry教程 安装 poetry 是一个命令行工具，安装之后就可以使用 poetry 指令。 安装之后就会在 python 解释器的安装目录下的 Scripts 目录里面出现 poetry.exe，因为在安装 python 解释器是配置过环境变量，然后就可以直接全局使用了。 常用指令 poetry init：初始化项目 poetry env use...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/knowledge/Python/Poetry/Poetry%E6%95%99%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:title","content":"Poetry教程"}],["meta",{"property":"og:description","content":"Poetry教程 安装 poetry 是一个命令行工具，安装之后就可以使用 poetry 指令。 安装之后就会在 python 解释器的安装目录下的 Scripts 目录里面出现 poetry.exe，因为在安装 python 解释器是配置过环境变量，然后就可以直接全局使用了。 常用指令 poetry init：初始化项目 poetry env use..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-17T14:21:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-17T14:21:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Poetry教程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-17T14:21:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"常用指令","slug":"常用指令","link":"#常用指令","children":[]},{"level":2,"title":"使用教程","slug":"使用教程","link":"#使用教程","children":[{"level":3,"title":"初始化项目","slug":"初始化项目","link":"#初始化项目","children":[]},{"level":3,"title":"虚拟环境","slug":"虚拟环境","link":"#虚拟环境","children":[{"level":4,"title":"创建虚拟环境(默认位置)","slug":"创建虚拟环境-默认位置","link":"#创建虚拟环境-默认位置","children":[]},{"level":4,"title":"创建虚拟环境(当前位置)","slug":"创建虚拟环境-当前位置","link":"#创建虚拟环境-当前位置","children":[]},{"level":4,"title":"启动与退出虚拟环境","slug":"启动与退出虚拟环境","link":"#启动与退出虚拟环境","children":[]}]},{"level":3,"title":"指令","slug":"指令","link":"#指令","children":[{"level":4,"title":"[add] 安装模块","slug":"add-安装模块","link":"#add-安装模块","children":[]},{"level":4,"title":"[add] 依赖更新顺序","slug":"add-依赖更新顺序","link":"#add-依赖更新顺序","children":[]},{"level":4,"title":"[lock] 更新 lock 文件","slug":"lock-更新-lock-文件","link":"#lock-更新-lock-文件","children":[]},{"level":4,"title":"[add] dev 开发依赖","slug":"add-dev-开发依赖","link":"#add-dev-开发依赖","children":[]},{"level":4,"title":"[update] 更新依赖","slug":"update-更新依赖","link":"#update-更新依赖","children":[]},{"level":4,"title":"[show]列出当前依赖","slug":"show-列出当前依赖","link":"#show-列出当前依赖","children":[]},{"level":4,"title":"[remove] 移除依赖","slug":"remove-移除依赖","link":"#remove-移除依赖","children":[]},{"level":4,"title":"[export] 导出依赖","slug":"export-导出依赖","link":"#export-导出依赖","children":[]}]},{"level":3,"title":"清除缓存","slug":"清除缓存","link":"#清除缓存","children":[]},{"level":3,"title":"修改 poetry 镜像源","slug":"修改-poetry-镜像源","link":"#修改-poetry-镜像源","children":[]}]}],"git":{"createdTime":1739802080000,"updatedTime":1739802080000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":1,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":9.89,"words":2968},"filePathRelative":"knowledge/Python/Poetry/Poetry教程.md","localizedDate":"2025年2月17日","excerpt":"\\n<h2>安装</h2>\\n<p>poetry 是一个命令行工具，安装之后就可以使用 poetry 指令。</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">pip</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> install</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> poetry</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,c as data};
