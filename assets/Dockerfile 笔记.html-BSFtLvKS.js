import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as e,b as s,e as a,d as n,f as t,r as h,o}from"./app-BQR2Y89h.js";const k="/assets/image-20230104164727609-CL_lPFUo.png",c={};function p(g,i){const l=h("font");return o(),d("div",null,[i[6]||(i[6]=e('<h1 id="dockerfile-笔记" tabindex="-1"><a class="header-anchor" href="#dockerfile-笔记"><span>Dockerfile 笔记</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Dockerfile就是镜像描述文件，可以通过 Dockerfile 文件构建成一个属于自己的镜像</p><p>如何使用 Dockerfile 构建自己的镜像？</p><ol><li><p>在指定位置创建一个 <code>Dockerfile</code> 文件，编写 dockerfile 相关语法</p></li><li><p>通过 Dockerfile 构建镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker build -t aa:1.0 .[指定 dockerfile 文件所在位置]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h2 id="解析过程" tabindex="-1"><a class="header-anchor" href="#解析过程"><span>解析过程</span></a></h2><figure><img src="'+k+'" alt="image-20230104164727609" tabindex="0" loading="lazy"><figcaption>image-20230104164727609</figcaption></figure><h2 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识"><span>基础知识</span></a></h2><ol><li>每条保留字指令都必须为大写，且后面都要跟至少一个参数。</li><li>指令按照从上到下，顺序执行。</li><li>#表示注释。</li><li>每条指令都会创建一个新的镜像层，并对镜像进行提交。</li></ol><h2 id="保留命令" tabindex="-1"><a class="header-anchor" href="#保留命令"><span>保留命令</span></a></h2><p>官方文档：<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/engine/reference/builder/</a></p>',11)),s("ul",null,[s("li",null,[i[1]||(i[1]=a("FROM：当前镜像是基于哪个镜像的，")),n(l,{color:"red"},{default:t(()=>i[0]||(i[0]=[a("第一个指令必须是FROM")])),_:1})]),i[2]||(i[2]=e("<li><s>MAINTAINER：镜像维护者的姓名和邮箱地址</s></li><li>RUN：构建镜像时需要运行的指令</li><li>EXPOSE：当前容器对外暴露出的端口号</li><li>WORKDIR：指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</li><li>ENV：用来在构建镜像过程中设置环境变量</li><li>ADD：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar<br> 包</li><li>COPY：类似于ADD，拷贝文件和目录到镜像中。将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</li><li>VOLUME：容器数据卷，用于数据保存和持久化工作</li><li>CMD：指定一个容器启动时要运行的命令。Dockerfiler中可以有多个CMD指令，但只有最后一个生效，CMD会被 <code>docker run</code> 之后的参数替换</li><li>ENTRYPOINT：指定一个容器启动时要运行的命令，ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及其参数</li>",10))]),i[7]||(i[7]=e(`<h3 id="from" tabindex="-1"><a class="header-anchor" href="#from"><span>FROM</span></a></h3><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ARG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> VERSION=latest</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> busybox:$VERSION</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ARG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> VERSION</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> echo $VERSION &gt; image_version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run"><span>RUN</span></a></h3><p>RUN has 2 forms:</p><ul><li><code>RUN &lt;command&gt;</code> (<em>shell</em> form, the command is run in a shell, which by default is <code>/bin/sh -c</code> on Linux or <code>cmd /S /C</code> on Windows)</li><li><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> (<em>exec</em> form)</li></ul><p>In the <em>shell</em> form you can use a <code>\\</code> (backslash) to continue a single RUN instruction onto the next line. For example, consider these two lines:</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /bin/bash -c </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;source $HOME/.bashrc; \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">echo $HOME&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Together they are equivalent to this single line:</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /bin/bash -c </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;source $HOME/.bashrc; echo $HOME&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="expose" tabindex="-1"><a class="header-anchor" href="#expose"><span>EXPOSE</span></a></h3><blockquote><p><code>EXPOSE</code> 命令只是一个元数据，用于提供关于容器内部服务的信息，以便在容器运行时时可以查看到容器所侦听的端口。</p><p>但并不会实际打开或映射这些端口。它为容器的网络通信提供了一些方便的信息。</p></blockquote><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>By default, <code>EXPOSE</code> assumes TCP. You can also specify UDP:</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 80/udp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To expose on both TCP and UDP, include two lines:</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 80/tcp</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 80/udp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>In this case, if you use <code>-P</code> with <code>docker run</code>, the port will be exposed once for TCP and once for UDP. Remember that <code>-P</code> uses an ephemeral high-ordered host port on the host, so the port will not be the same for TCP and UDP.</p><p>Regardless of the <code>EXPOSE</code> settings, you can override them at runtime by using the <code>-p</code> flag. For example</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ docker run -p 80:80/tcp -p 80:80/udp ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="workdir" tabindex="-1"><a class="header-anchor" href="#workdir"><span>WORKDIR</span></a></h3><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /path/to/workdir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If the <code>WORKDIR</code> doesn’t exist, it will be created even if it’s not used in any subsequent <code>Dockerfile</code> instruction.</p><p>The <code>WORKDIR</code> instruction can be used multiple times in a <code>Dockerfile</code>. If a relative path is provided, it will be relative to the path of the previous <code>WORKDIR</code> instruction. For example:</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /a</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> c</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pwd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The output of the final <code>pwd</code> command in this <code>Dockerfile</code> would be <code>/a/b/c</code>.</p><h3 id="volume" tabindex="-1"><a class="header-anchor" href="#volume"><span>VOLUME</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>VOLUME xxx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你可以把VOLUME理解为，从镜像中<strong>复制</strong>指定卷的文件夹<strong>到本地</strong><code>xxx</code>，然后<strong>再</strong>把本地的该文件夹<strong>挂载</strong>到容器里面去。</p><h3 id="cmd-entrypoint" tabindex="-1"><a class="header-anchor" href="#cmd-entrypoint"><span>CMD &amp; ENTRYPOINT</span></a></h3><p>用来指定容器启动时默认执行的指令</p>`,30)),n(l,{color:"red"},{default:t(()=>i[3]||(i[3]=[a("CMD 指令可以存在多个，但是最有最后一个生效")])),_:1}),i[8]||(i[8]=e(`<p><strong>使用方式：</strong></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1、直接命令执行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> xxx.jar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2、json数组方式(推荐)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;java&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;-jar&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;xxx.jar&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CMD 可以直接覆盖命令，而 ENTRYPOINT 需要用参数指定需要覆盖的指令</p><ul><li>CMD：<code>docker run [images]:[tag] [command] [params] </code></li><li>ENTRYPOINT：<code>docker run --entrypoint=[command] [images]:[tag] [params]</code></li></ul>`,4)),s("p",null,[i[5]||(i[5]=s("strong",null,"配置使用：",-1)),n(l,{color:"red"},{default:t(()=>i[4]||(i[4]=[a("必须使用 json 数组方式")])),_:1})]),i[9]||(i[9]=e(`<p>entrypoint 用来书写固定的参数</p><p>cmd 用来传递参数</p><p>比如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>FROM xxx</span></span>
<span class="line"><span>ENTRYPOINT [&#39;ls&#39;]</span></span>
<span class="line"><span>CMD [&#39;/home&#39;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们运行 <code>docker run xxx:xx</code>，那么它会执行默认的指令<code>ls /home</code>，如果我们想更换地址的话，可以运行<code>docker run xxx:xx /root</code>，这就等效于<code>ls /root</code></p><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><p>1、<code>--network</code></p><p>使用宿主机的网络来构建 docker</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> host</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2、指定代理</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> haha</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build-arg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https_proxy=http://192.168.31.16:1013</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build-arg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http_proxy=http://192.168.31.16:1013</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,11))])}const b=r(c,[["render",p],["__file","Dockerfile 笔记.html.vue"]]),v=JSON.parse('{"path":"/knowledge/%E5%AE%B9%E5%99%A8%E5%8C%96_%E7%BC%96%E6%8E%92/Docker/Dockerfile%20%E7%AC%94%E8%AE%B0.html","title":"Dockerfile 笔记","lang":"zh-CN","frontmatter":{"description":"Dockerfile 笔记 简介 Dockerfile就是镜像描述文件，可以通过 Dockerfile 文件构建成一个属于自己的镜像 如何使用 Dockerfile 构建自己的镜像？ 在指定位置创建一个 Dockerfile 文件，编写 dockerfile 相关语法 通过 Dockerfile 构建镜像 解析过程 image-202301041647...","head":[["meta",{"property":"og:url","content":"https://jishuzhaix.cn/knowledge/%E5%AE%B9%E5%99%A8%E5%8C%96_%E7%BC%96%E6%8E%92/Docker/Dockerfile%20%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"技数斋"}],["meta",{"property":"og:title","content":"Dockerfile 笔记"}],["meta",{"property":"og:description","content":"Dockerfile 笔记 简介 Dockerfile就是镜像描述文件，可以通过 Dockerfile 文件构建成一个属于自己的镜像 如何使用 Dockerfile 构建自己的镜像？ 在指定位置创建一个 Dockerfile 文件，编写 dockerfile 相关语法 通过 Dockerfile 构建镜像 解析过程 image-202301041647..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-12T14:50:48.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-12T14:50:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dockerfile 笔记\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-12T14:50:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"贺墨于\\",\\"url\\":\\"https://jishuzhaix.cn\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"解析过程","slug":"解析过程","link":"#解析过程","children":[]},{"level":2,"title":"基础知识","slug":"基础知识","link":"#基础知识","children":[]},{"level":2,"title":"保留命令","slug":"保留命令","link":"#保留命令","children":[{"level":3,"title":"FROM","slug":"from","link":"#from","children":[]},{"level":3,"title":"RUN","slug":"run","link":"#run","children":[]},{"level":3,"title":"EXPOSE","slug":"expose","link":"#expose","children":[]},{"level":3,"title":"WORKDIR","slug":"workdir","link":"#workdir","children":[]},{"level":3,"title":"VOLUME","slug":"volume","link":"#volume","children":[]},{"level":3,"title":"CMD & ENTRYPOINT","slug":"cmd-entrypoint","link":"#cmd-entrypoint","children":[]}]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]}],"git":{"createdTime":1741791048000,"updatedTime":1741791048000,"contributors":[{"name":"HeMOu","username":"HeMOu","email":"fangqichenchao@163.com","commits":1,"url":"https://github.com/HeMOu"}]},"readingTime":{"minutes":3.8,"words":1139},"filePathRelative":"knowledge/容器化&编排/Docker/Dockerfile 笔记.md","localizedDate":"2025年3月12日","excerpt":"\\n<h2>简介</h2>\\n<p>Dockerfile就是镜像描述文件，可以通过 Dockerfile 文件构建成一个属于自己的镜像</p>\\n<p>如何使用 Dockerfile 构建自己的镜像？</p>\\n<ol>\\n<li>\\n<p>在指定位置创建一个 <code>Dockerfile</code> 文件，编写 dockerfile 相关语法</p>\\n</li>\\n<li>\\n<p>通过 Dockerfile 构建镜像</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>docker build -t aa:1.0 .[指定 dockerfile 文件所在位置]</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ol>","autoDesc":true}');export{b as comp,v as data};
